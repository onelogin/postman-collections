{
	"info": {
		"_postman_id": "cc680c60-346a-45f2-9de2-cc9bd2d319c7",
		"name": "OneLogin API Definitive",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19670008"
	},
	"item": [
		{
			"name": "OpenID-connect",
			"item": [
				{
					"name": "V1",
					"item": [
						{
							"name": "Implicit Flow",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/oidc/1/auth?client_id={{OIDC_client_id}}&nonce={{$guid}}&redirect_uri={{OIDC_redirect_uri}}&response_type=id_token&scope=openid&state=",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"oidc",
										"1",
										"auth"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{OIDC_client_id}}"
										},
										{
											"key": "nonce",
											"value": "{{$guid}}"
										},
										{
											"key": "redirect_uri",
											"value": "{{OIDC_redirect_uri}}"
										},
										{
											"key": "response_type",
											"value": "id_token"
										},
										{
											"key": "scope",
											"value": "openid"
										},
										{
											"key": "state",
											"value": ""
										},
										{
											"key": "resource",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "This GET call is part of the Implicit Flow and must be made via a web browser. The user will be redirected to login at OneLogin and then redirected back again to the registered redirect_uri."
							},
							"response": []
						},
						{
							"name": "Get Access Token via Authorization Code",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{OIDC_client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{OIDC_client_secret}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{OIDC_authorization_code}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{OIDC_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{api-domain}}/oidc/1/token",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"oidc",
										"1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authorization Code Flow",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/oidc/1/auth?client_id={{OIDC_client_id}}&nonce={{$guid}}&redirect_uri={{OIDC_redirect_uri}}&response_type=code&scope=openid&state=",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"oidc",
										"1",
										"auth"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{OIDC_client_id}}"
										},
										{
											"key": "nonce",
											"value": "{{$guid}}"
										},
										{
											"key": "redirect_uri",
											"value": "{{OIDC_redirect_uri}}"
										},
										{
											"key": "response_type",
											"value": "code"
										},
										{
											"key": "scope",
											"value": "openid"
										},
										{
											"key": "state",
											"value": ""
										},
										{
											"key": "resource",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "This GET call is part of the Authentication Flow and must be made via a web browser. The user will be redirected to login at OneLogin and then redirected back again to the registered redirect_uri."
							},
							"response": []
						},
						{
							"name": "Client Credentials Grant",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{OIDC_client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{OIDC_client_id}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{api-domain}}/oidc/1/token",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"oidc",
										"1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password Grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"OIDC_access_token\", jsonData.access_token);",
											"postman.setEnvironmentVariable(\"OIDC_refresh_token\", jsonData.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{OIDC_client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{OIDC_client_secret}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{OIDC_client_id}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid profile email",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "id_token ",
											"type": "text"
										},
										{
											"key": "resource",
											"value": "https://example.com/contacts",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{api-domain}}/oidc/1/token",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"oidc",
										"1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Token",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{OIDC_client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{OIDC_client_secret}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{OIDC_access_token}}",
											"type": "text"
										},
										{
											"key": "token_type_hint",
											"value": "access_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{api-domain}}/oidc/1/token/introspection",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"oidc",
										"1",
										"token",
										"introspection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"OIDC_access_token\", jsonData.access_token);",
											"postman.setEnvironmentVariable(\"OIDC_refresh_token\", jsonData.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{OIDC_client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{OIDC_client_secret}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "{{OIDC_refresh_token}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{api-domain}}/oidc/1/token",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"oidc",
										"1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke Token",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{OIDC_client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{OIDC_client_secret}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{OIDC_access_token}}",
											"type": "text"
										},
										{
											"key": "token_type_hint",
											"value": "access_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{api-domain}}/oidc/1/token/revocation",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"oidc",
										"1",
										"token",
										"revocation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Provider Configuration Metadata",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/oidc/1/.well-known/openid-configuration",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"oidc",
										"1",
										".well-known",
										"openid-configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User Info",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{OIDC_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/oidc/1/me",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"oidc",
										"1",
										"me"
									]
								},
								"description": "Returns user information associated with the session"
							},
							"response": []
						}
					]
				},
				{
					"name": "V2",
					"item": [
						{
							"name": "Implicit Flow",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/oidc/2/auth?client_id={{OIDC_client_id}}&nonce={{$guid}}&redirect_uri={{OIDC_redirect_uri}}&response_type=id_token&scope=openid&state=",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"oidc",
										"2",
										"auth"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{OIDC_client_id}}"
										},
										{
											"key": "nonce",
											"value": "{{$guid}}"
										},
										{
											"key": "redirect_uri",
											"value": "{{OIDC_redirect_uri}}"
										},
										{
											"key": "response_type",
											"value": "id_token"
										},
										{
											"key": "scope",
											"value": "openid"
										},
										{
											"key": "state",
											"value": ""
										}
									]
								},
								"description": "This GET call is part of the Implicit Flow and must be made via a web browser. The user will be redirected to login at OneLogin and then redirected back again to the registered redirect_uri."
							},
							"response": []
						},
						{
							"name": "Authorization Code Flow",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/oidc/2/auth?client_id={{OIDC_client_id}}&nonce={{$guid}}&redirect_uri={{OIDC_redirect_uri}}&response_type=code&scope=openid&state=",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"oidc",
										"2",
										"auth"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{OIDC_client_id}}"
										},
										{
											"key": "nonce",
											"value": "{{$guid}}"
										},
										{
											"key": "redirect_uri",
											"value": "{{OIDC_redirect_uri}}"
										},
										{
											"key": "response_type",
											"value": "code"
										},
										{
											"key": "scope",
											"value": "openid"
										},
										{
											"key": "state",
											"value": ""
										}
									]
								},
								"description": "This GET call is part of the Authentication Flow and must be made via a web browser. The user will be redirected to login at OneLogin and then redirected back again to the registered redirect_uri."
							},
							"response": []
						},
						{
							"name": "Get Access Token via Authorization Code",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{OIDC_client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{OIDC_client_secret}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{OIDC_authorization_code}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{OIDC_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{api-domain}}/oidc/2/token",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"oidc",
										"2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password Grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"OIDC_access_token\", jsonData.access_token);",
											"postman.setEnvironmentVariable(\"OIDC_refresh_token\", jsonData.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{OIDC_client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{OIDC_client_secret}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{OIDC_client_id}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid profile email",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "id_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{api-domain}}/oidc/2/token",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"oidc",
										"2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Client Credentials Grant",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{OIDC_client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{OIDC_client_id}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{api-domain}}/oidc/2/token",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"oidc",
										"2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Token",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{OIDC_client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{OIDC_client_secret}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{OIDC_access_token}}",
											"type": "text"
										},
										{
											"key": "token_type_hint",
											"value": "access_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{api-domain}}/oidc/2/token/introspection",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"oidc",
										"2",
										"token",
										"introspection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"OIDC_access_token\", jsonData.access_token);",
											"postman.setEnvironmentVariable(\"OIDC_refresh_token\", jsonData.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{OIDC_client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{OIDC_client_secret}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "{{OIDC_refresh_token}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{api-domain}}/oidc/2/token",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"oidc",
										"2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke Token",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{OIDC_client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{OIDC_client_secret}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{OIDC_access_token}}",
											"type": "text"
										},
										{
											"key": "token_type_hint",
											"value": "access_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{api-domain}}/oidc/2/token/revocation",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"oidc",
										"2",
										"token",
										"revocation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Provider Configuration Metadata",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "hthttps://{{api-domain}}/oidc/2/.well-known/openid-configuration",
									"protocol": "hthttps",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"oidc",
										"2",
										".well-known",
										"openid-configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User Info",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{OIDC_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/oidc/2/me",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"oidc",
										"2",
										"me"
									]
								},
								"description": "Returns user information associated with the session"
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "OAuth 2.0 Tokens",
			"item": [
				{
					"name": "Get Rate Limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// Tests ",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var schema = {",
									"  \"properties\": {",
									"    \"data\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"X-RateLimit-Limit\":{",
									"                \"type\":\"integer\"",
									"            },",
									"            \"X-RateLimit-Remaining\":{",
									"                \"type\":\"integer\"",
									"            },",
									"            \"X-RateLimit-Reset\":{",
									"                \"type\":\"integer\"",
									"            }            ",
									"        }",
									"    }",
									"  }",
									"};",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{api-domain}}/auth/rate_limit",
							"protocol": "https",
							"host": [
								"{{api-domain}}"
							],
							"path": [
								"auth",
								"rate_limit"
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/auth/rate_limit",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"auth",
										"rate_limit"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Generate Tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// For Convenience",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
									"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token);",
									"",
									"// Tests ",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"A bearer token is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.token_type).to.eql(\"bearer\");",
									"});",
									"",
									"var schema = {",
									"  \"properties\": {",
									"    \"access_token\": {",
									"        \"type\": \"string\"",
									"    },",
									"    \"refresh_token\": {",
									"        \"type\": \"string\"",
									"    },",
									"    \"created_at\": {",
									"        \"type\": \"string\"",
									"    },",
									"    \"expires_in\": {",
									"        \"type\": \"integer\"",
									"    },",
									"    \"token_type\": {",
									"        \"type\": \"string\"",
									"    },",
									"    \"account_id\": {",
									"        \"type\": \"integer\"",
									"    }",
									"  }",
									"};",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"grant_type\":\"client_credentials\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{api-domain}}/auth/oauth2/v2/token",
							"protocol": "https",
							"host": [
								"{{api-domain}}"
							],
							"path": [
								"auth",
								"oauth2",
								"v2",
								"token"
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"grant_type\": \"client_credentials\"\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/auth/oauth2/v2/token",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"auth",
										"oauth2",
										"v2",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Revoke Tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests ",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var schema = {",
									"  \"properties\": {",
									"    \"status\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"error\": {",
									"                \"type\": \"boolean\"",
									"            },",
									"            \"code\": {",
									"                \"type\": \"integer\"",
									"            },",
									"            \"type\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"message\": {",
									"                \"type\": \"string\"",
									"            }",
									"        }",
									"    },",
									"    \"data\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"X-RateLimit-Limit\":{",
									"                \"type\":\"integer\"",
									"            },",
									"            \"X-RateLimit-Remaining\":{",
									"                \"type\":\"integer\"",
									"            },",
									"            \"X-RateLimit-Reset\":{",
									"                \"type\":\"integer\"",
									"            }            ",
									"        }",
									"    }",
									"  }",
									"};",
									"",
									"pm.test('Schema is valid', function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"access_token\":\"{{access_token}}\"\n}"
						},
						"url": {
							"raw": "https://{{api-domain}}/auth/oauth2/revoke",
							"protocol": "https",
							"host": [
								"{{api-domain}}"
							],
							"path": [
								"auth",
								"oauth2",
								"revoke"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "API Authorization",
			"item": [
				{
					"name": "V2",
					"item": [
						{
							"name": "Auth Servers",
							"item": [
								{
									"name": "List Api Auth Servers",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{api-domain}}/api/2/api_authorizations",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"api_authorizations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Api Auth Server",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// For Convenience",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"api_auth_id\", jsonData.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"name\": \"Contacts API\",\n    \"description\": \"This is a sample api\",\n    \"configuration\": {\n      \"resource_identifier\": \"http://myapi.com/contacts2\",\n      \"audiences\": [\"http://myapi.com/contacts2\"],\n      \"access_token_expiration_minutes\": 10,\n      \"refresh_token_expiration_minutes\": 30\n    }\n}"
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/api_authorizations",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"api_authorizations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Api Auth Server",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{api-domain}}/api/2/api_authorizations/{{api_auth_id}}",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"api_authorizations",
												"{{api_auth_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Api Auth Server",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"name\": \"Contacts API\",\n    \"description\": \"This is an updated sample api\",\n    \"configuration\": {\n      \"resource_identifier\": \"http://myapi.com/contacts2\",\n      \"audiences\": [\"http://myapi.com/contacts2\"],\n      \"access_token_expiration_minutes\": 15,\n      \"refresh_token_expiration_minutes\": 35\n    }\n}"
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/api_authorizations/{{api_auth_id}}",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"api_authorizations",
												"{{api_auth_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Api Auth Server",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{api-domain}}/api/2/api_authorizations/{{api_auth_id}}",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"api_authorizations",
												"{{api_auth_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Claims",
							"item": [
								{
									"name": "Get Api Auth Server Claims",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{api-domain}}/api/2/api_authorizations/{{api_auth_id}}/claims",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"api_authorizations",
												"{{api_auth_id}}",
												"claims"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Api Auth Server Claim",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// For Convenience",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"claim_id\", jsonData.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"email_address\"\n}\n"
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/api_authorizations/{{api_auth_id}}/claims",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"api_authorizations",
												"{{api_auth_id}}",
												"claims"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Api Auth Server Claim",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_attribute_mappings\": \"email\",\n    \"label\": \"email_address\",\n    \"name\": \"email_address\"\n}\n"
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/api_authorizations/{{api_auth_id}}/claims/{{claim_id}}",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"api_authorizations",
												"{{api_auth_id}}",
												"claims",
												"{{claim_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Api Auth Server Claim",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{api-domain}}/api/2/api_authorizations/{{api_auth_id}}/claims/{{claim_id}}",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"api_authorizations",
												"{{api_auth_id}}",
												"claims",
												"{{claim_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Scopes",
							"item": [
								{
									"name": "Get Api Auth Server Scopes",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{api-domain}}/api/2/api_authorizations/{{api_auth_id}}/scopes",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"api_authorizations",
												"{{api_auth_id}}",
												"scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Api Auth Server Scope",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// For Convenience",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"scope_id\", jsonData.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"value\": \"custom:scope\",\n\t\"description\": \"A custom scope\"\n}\n\n"
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/api_authorizations/{{api_auth_id}}/scopes",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"api_authorizations",
												"{{api_auth_id}}",
												"scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Api Auth Server Scope",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"value\": \"write:contacts\",\n \"description\": \"Create some contacts\"\n}"
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/api_authorizations/{{api_auth_id}}/scopes/{{scope_id}}",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"api_authorizations",
												"{{api_auth_id}}",
												"scopes",
												"{{scope_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Api Auth Server Scope",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{api-domain}}/api/2/api_authorizations/{{api_auth_id}}/scopes/{{scope_id}}",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"api_authorizations",
												"{{api_auth_id}}",
												"scopes",
												"{{scope_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Client Apps",
							"item": [
								{
									"name": "Get Api Auth Server Clients",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{api-domain}}/api/2/api_authorizations/{{api_auth_id}}/clients",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"api_authorizations",
												"{{api_auth_id}}",
												"clients"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Api Auth Server Client",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// For Convenience",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"client_app_id\", jsonData.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"app_id\": {{app_id}},\n\t\"scopes\": [31]\n}"
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/api_authorizations/{{api_auth_id}}/clients",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"api_authorizations",
												"{{api_auth_id}}",
												"clients"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Api Auth Server Client",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scopes\": [51,53]\n}"
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/api_authorizations/{{api_auth_id}}/clients/{{client_app_id}}",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"api_authorizations",
												"{{api_auth_id}}",
												"clients",
												"{{client_app_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Api Auth Server Client",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{api-domain}}/api/2/api_authorizations/{{api_auth_id}}/clients/{{client_app_id}}",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"api_authorizations",
												"{{api_auth_id}}",
												"clients",
												"{{client_app_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Apps",
			"item": [
				{
					"name": "V1",
					"item": [
						{
							"name": "Get Apps",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"// Tests ",
											"pm.test(\"Response time is less than 1s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"connector_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"auth_method\": {",
											"                \"type\": \"integer\"",
											"            },                ",
											"            \"name\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"visible\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"auth_method_description\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"created_at\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"date-time\"",
											"            },",
											"            \"updated_at\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"date-time\"",
											"            },",
											"            \"description\": {",
											"                \"type\": [\"string\", \"null\"]",
											"            },",
											"            \"enforcement_point\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"target\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"context_root\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"vhost\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"case_sensitive\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"session_expiry_inactivity\": {",
											"                        \"type\": \"object\",",
											"                        \"properties\": {",
											"                            \"value\": {",
											"                                \"type\": \"integer\"",
											"                            },",
											"                            \"unit\": {",
											"                                \"type\": \"string\"",
											"                            }",
											"                        }",
											"                    },",
											"                    \"landing_page\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"conditions\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"resources\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {",
											"                            \"type\": \"object\",",
											"                            \"properties\": {",
											"                                \"conditions\": {",
											"                                    \"type\": [\"string\", \"null\"]",
											"                                },",
											"                                \"permissions\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"is_path_regex\": {",
											"                                    \"type\": [\"string\", \"null\"]",
											"                                },",
											"                                \"resource_id\": {",
											"                                    \"type\": \"integer\"",
											"                                },",
											"                                \"require_auth\": {",
											"                                    \"type\": \"boolean\"",
											"                                },",
											"                                \"path\": {",
											"                                    \"type\": \"string\"",
											"                                }",
											"                            }",
											"                        }",
											"                    },",
											"                    \"permissions\": {",
											"                        \"type\": \"string\",",
											"                        \"enum\": [\"deny\", \"allow\", \"conditional\"]",
											"                    },",
											"                    \"use_target_host_header\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"require_sitewide_authentication\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"token\": {",
											"                        \"type\": [\"string\", \"null\"]",
											"                    },",
											"                    \"session_expiry_fixed\": {",
											"                        \"type\": \"object\",",
											"                        \"properties\": {",
											"                            \"unit\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"value\": {",
											"                                \"type\": \"integer\"",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/1/apps",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"apps"
									],
									"query": [
										{
											"key": "connector_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "auth_method",
											"value": "",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,name",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "V2",
					"item": [
						{
							"name": "List Apps",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"// Tests ",
											"pm.test(\"Response time is less than 1s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"connector_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"auth_method\": {",
											"                \"type\": \"integer\"",
											"            },                ",
											"            \"name\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"visible\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"auth_method_description\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"created_at\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"date-time\"",
											"            },",
											"            \"updated_at\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"date-time\"",
											"            },",
											"            \"description\": {",
											"                \"type\": [\"string\", \"null\"]",
											"            },",
											"            \"enforcement_point\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"target\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"context_root\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"vhost\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"case_sensitive\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"session_expiry_inactivity\": {",
											"                        \"type\": \"object\",",
											"                        \"properties\": {",
											"                            \"value\": {",
											"                                \"type\": \"integer\"",
											"                            },",
											"                            \"unit\": {",
											"                                \"type\": \"string\"",
											"                            }",
											"                        }",
											"                    },",
											"                    \"landing_page\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"conditions\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"resources\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {",
											"                            \"type\": \"object\",",
											"                            \"properties\": {",
											"                                \"conditions\": {",
											"                                    \"type\": [\"string\", \"null\"]",
											"                                },",
											"                                \"permissions\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"is_path_regex\": {",
											"                                    \"type\": [\"string\", \"null\"]",
											"                                },",
											"                                \"resource_id\": {",
											"                                    \"type\": \"integer\"",
											"                                },",
											"                                \"require_auth\": {",
											"                                    \"type\": \"boolean\"",
											"                                },",
											"                                \"path\": {",
											"                                    \"type\": \"string\"",
											"                                }",
											"                            }",
											"                        }",
											"                    },",
											"                    \"permissions\": {",
											"                        \"type\": \"string\",",
											"                        \"enum\": [\"deny\", \"allow\", \"conditional\"]",
											"                    },",
											"                    \"use_target_host_header\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"require_sitewide_authentication\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"token\": {",
											"                        \"type\": [\"string\", \"null\"]",
											"                    },",
											"                    \"session_expiry_fixed\": {",
											"                        \"type\": \"object\",",
											"                        \"properties\": {",
											"                            \"unit\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"value\": {",
											"                                \"type\": \"integer\"",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/apps",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"apps"
									],
									"query": [
										{
											"key": "connector_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "auth_method",
											"value": "",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,name",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get App",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/apps/{{app_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"apps",
										"{{app_id}}"
									],
									"query": [
										{
											"key": "name",
											"value": "",
											"disabled": true
										},
										{
											"key": "connector_id",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create App",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// For Convenience",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"app_id\", jsonData.id);",
											"",
											"// Tests ",
											"pm.test(\"Response time is less than 1s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"connector_id\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"auth_method\": {",
											"            \"type\": \"integer\"",
											"        },                ",
											"        \"auth_method_description\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"visible\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"created_at\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"date-time\"",
											"        },",
											"        \"updated_at\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"date-time\"",
											"        },",
											"        \"description\": {",
											"            \"type\": [\"string\", \"null\"]",
											"        },",
											"        \"tab_id\": {",
											"            \"type\": [\"null\", \"integer\"]",
											"        },",
											"        \"policy_id\": {",
											"            \"type\": [\"null\", \"integer\"]",
											"        },",
											"        \"notes\": {",
											"            \"type\": [\"null\", \"string\"]",
											"        },",
											"        \"role_ids\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"integer\"",
											"            }",
											"        },",
											"        \"icon_url\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"allow_assumed_signin\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"configuration\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"signature_algorithm\": {",
											"                    \"type\": \"string\",",
											"                    \"enum\": [\"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\"]",
											"                },",
											"                \"certificate_id\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"client_id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"client_secret\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"oidc_encryption_key\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"access_token_expiration_minutes\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"refresh_token_expiration_minutes\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"token_endpoint_auth_method\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"oidc_application_type\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"oidc_api_version\": {",
											"                    \"type\": \"integer\"",
											"                }",
											"            }",
											"        },",
											"        \"parameters\": {",
											"            \"type\": \"object\",",
											"            \"additionalProperties\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"provisioned_entitlements\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"values\": {",
											"                        \"type\": [\"string\", \"null\"]",
											"                    },",
											"                    \"user_attribute_mappings\": {",
											"                        \"type\": [\"string\", \"null\"]",
											"                    },",
											"                    \"id\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"skip_if_blank\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"user_attribute_macros\": {",
											"                        \"type\": [\"string\", \"null\"]",
											"                    },",
											"                    \"default_values\": {",
											"                        \"type\": [\"string\", \"null\"]",
											"                    },",
											"                    \"attribute_transformations\": {",
											"                        \"type\": [\"string\", \"null\"]",
											"                    },",
											"                    \"label\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"include_in_saml_assertion\": {",
											"                        \"type\": \"boolean\"",
											"                    }",
											"                }",
											"            }",
											"        },",
											"        \"sso\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"certificate\": {",
											"                    \"type\": [\"object\", \"null\"],",
											"                    \"properties\": {",
											"                        \"id\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"name\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"value\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    }",
											"                },",
											"                \"issuer\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"acs_url\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"sls_url\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"metadata_url\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"wsfed_sso_url\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"wstrust_mex_url\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"wstrust_url\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"client_id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"client_secret\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"provisioning\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"enabled\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"status\": {",
											"                    \"type\": \"string\",",
											"                    \"enum\": [\"Enabled\", \"Available\", \"Not Available\"]",
											"                }",
											"            }",
											"        },",
											"        \"enforcement_point\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"target\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"context_root\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"vhost\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"case_sensitive\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"session_expiry_inactivity\": {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"value\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"unit\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    }",
											"                },",
											"                \"landing_page\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"conditions\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"resources\": {",
											"                    \"type\": \"array\",",
											"                    \"items\": {",
											"                        \"type\": \"object\",",
											"                        \"properties\": {",
											"                            \"conditions\": {",
											"                                \"type\": [\"string\", \"null\"]",
											"                            },",
											"                            \"permissions\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"is_path_regex\": {",
											"                                \"type\": [\"string\", \"null\"]",
											"                            },",
											"                            \"resource_id\": {",
											"                                \"type\": \"integer\"",
											"                            },",
											"                            \"require_auth\": {",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"path\": {",
											"                                \"type\": \"string\"",
											"                            }",
											"                        }",
											"                    }",
											"                },",
											"                \"permissions\": {",
											"                    \"type\": \"string\",",
											"                    \"enum\": [\"deny\", \"allow\", \"conditional\"]",
											"                },",
											"                \"use_target_host_header\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"require_sitewide_authentication\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"token\": {",
											"                    \"type\": [\"string\", \"null\"]",
											"                },",
											"                \"session_expiry_fixed\": {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"unit\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"value\": {",
											"                            \"type\": \"integer\"",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"connector_id\": 50534,\n  \"name\": \"Amazon Web Services (AWS) Multi Role\",\n  \"description\": \"\",\n  \"visible\": true,\n  \"sso\": {\n    \"certificate\": {\n      \"id\": 170216\n    }\n  },\n  \"configuration\": {\n    \"signature_algorithm\": \"SHA-1\"\n  },\n  \"parameters\": {\n    \"saml_username\": {\n      \"user_attribute_mappings\": \"email\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/apps",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"apps"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update App",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"// Tests ",
											"pm.test(\"Response time is less than 700ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"connector_id\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"auth_method\": {",
											"            \"type\": \"integer\"",
											"        },                ",
											"        \"auth_method_description\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"visible\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"created_at\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"date-time\"",
											"        },",
											"        \"updated_at\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"date-time\"",
											"        },",
											"        \"description\": {",
											"            \"type\": [\"string\", \"null\"]",
											"        },",
											"        \"tab_id\": {",
											"            \"type\": [\"null\", \"integer\"]",
											"        },",
											"        \"policy_id\": {",
											"            \"type\": [\"null\", \"integer\"]",
											"        },",
											"        \"notes\": {",
											"            \"type\": [\"null\", \"string\"]",
											"        },",
											"        \"role_ids\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"integer\"",
											"            }",
											"        },",
											"        \"icon_url\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"allow_assumed_signin\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"configuration\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"signature_algorithm\": {",
											"                    \"type\": \"string\",",
											"                    \"enum\": [\"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\"]",
											"                },",
											"                \"certificate_id\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"client_id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"client_secret\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"oidc_encryption_key\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"access_token_expiration_minutes\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"refresh_token_expiration_minutes\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"token_endpoint_auth_method\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"oidc_application_type\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"oidc_api_version\": {",
											"                    \"type\": \"integer\"",
											"                }",
											"            }",
											"        },",
											"        \"parameters\": {",
											"            \"type\": \"object\",",
											"            \"additionalProperties\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"provisioned_entitlements\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"values\": {",
											"                        \"type\": [\"string\", \"null\"]",
											"                    },",
											"                    \"user_attribute_mappings\": {",
											"                        \"type\": [\"string\", \"null\"]",
											"                    },",
											"                    \"id\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"skip_if_blank\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"user_attribute_macros\": {",
											"                        \"type\": [\"string\", \"null\"]",
											"                    },",
											"                    \"default_values\": {",
											"                        \"type\": [\"string\", \"null\"]",
											"                    },",
											"                    \"attribute_transformations\": {",
											"                        \"type\": [\"string\", \"null\"]",
											"                    },",
											"                    \"label\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"include_in_saml_assertion\": {",
											"                        \"type\": \"boolean\"",
											"                    }",
											"                }",
											"            }",
											"        },",
											"        \"sso\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"certificate\": {",
											"                    \"type\": [\"object\", \"null\"],",
											"                    \"properties\": {",
											"                        \"id\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"name\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"value\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    }",
											"                },",
											"                \"issuer\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"acs_url\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"sls_url\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"metadata_url\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"wsfed_sso_url\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"wstrust_mex_url\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"wstrust_url\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"client_id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"client_secret\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"provisioning\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"enabled\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"status\": {",
											"                    \"type\": \"string\",",
											"                    \"enum\": [\"Enabled\", \"Available\", \"Not Available\"]",
											"                }",
											"            }",
											"        },",
											"        \"enforcement_point\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"target\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"context_root\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"vhost\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"case_sensitive\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"session_expiry_inactivity\": {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"value\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"unit\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    }",
											"                },",
											"                \"landing_page\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"conditions\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"resources\": {",
											"                    \"type\": \"array\",",
											"                    \"items\": {",
											"                        \"type\": \"object\",",
											"                        \"properties\": {",
											"                            \"conditions\": {",
											"                                \"type\": [\"string\", \"null\"]",
											"                            },",
											"                            \"permissions\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"is_path_regex\": {",
											"                                \"type\": [\"string\", \"null\"]",
											"                            },",
											"                            \"resource_id\": {",
											"                                \"type\": \"integer\"",
											"                            },",
											"                            \"require_auth\": {",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"path\": {",
											"                                \"type\": \"string\"",
											"                            }",
											"                        }",
											"                    }",
											"                },",
											"                \"permissions\": {",
											"                    \"type\": \"string\",",
											"                    \"enum\": [\"deny\", \"allow\", \"conditional\"]",
											"                },",
											"                \"use_target_host_header\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"require_sitewide_authentication\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"token\": {",
											"                    \"type\": [\"string\", \"null\"]",
											"                },",
											"                \"session_expiry_fixed\": {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"unit\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"value\": {",
											"                            \"type\": \"integer\"",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});",
											"",
											"pm.test('App attribute is updated', function() {",
											"  pm.expect(jsonData.name).to.be.eql(\"APP UPDATED VIA API\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"APP UPDATED VIA API\"\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/apps/{{app_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"apps",
										"{{app_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Parameter from App",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{api-domain}}/api/2/apps/{{app_id}}/parameters/{{parameter_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"apps",
										"{{app_id}}",
										"parameters",
										"{{parameter_id}}"
									],
									"query": [
										{
											"key": "name",
											"value": "",
											"disabled": true
										},
										{
											"key": "connector_id",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete App",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests ",
											"pm.test(\"Response time is less than 2s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});",
											"",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{api-domain}}/api/2/apps/{{app_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"apps",
										"{{app_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get App Users",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "ol_use_preprod=true",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://{{api-domain}}/api/2/apps/{{app_id}}/users",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"apps",
										"{{app_id}}",
										"users"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "App Rules",
			"item": [
				{
					"name": "V2",
					"item": [
						{
							"name": "List Rules",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/apps/{{app_id}}/rules",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"apps",
										"{{app_id}}",
										"rules"
									],
									"query": [
										{
											"key": "has_condition",
											"value": "has_role:{{role_id}}",
											"disabled": true
										},
										{
											"key": "has_condition_type",
											"value": "none",
											"disabled": true
										},
										{
											"key": "has_action",
											"value": "set_status:*",
											"disabled": true
										},
										{
											"key": "has_action_type",
											"value": "none",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/apps/{{app_id}}/rules/{{rule_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"apps",
										"{{app_id}}",
										"rules",
										"{{rule_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response ID is not null\", function () {",
											"    pm.response.json().id.not.equal(null);",
											"});",
											"",
											"postman.setEnvironmentVariable(\"mapping_id\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Sample Rule\",\n    \"match\": \"all\",\n    \"enabled\": true,\n    \"position\": 1,\n    \"conditions\": [\n        {\n            \"source\": \"has_role\",\n            \"operator\": \"ri\",\n            \"value\": \"272445\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"action\": \"set_groups\",\n            \"value\": [\n                \"member_of\"\n            ],\n            \"expression\": \".*\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/apps/{{app_id}}/rules",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"apps",
										"{{app_id}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response ID is not null\", function () {",
											"    pm.response.json().id.not.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Sample Rule Updated\",\n    \"match\": \"all\",\n    \"enabled\": true,\n    \"position\": 1,\n    \"conditions\": [\n        {\n            \"source\": \"has_role\",\n            \"operator\": \"ri\",\n            \"value\": \"272445\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"action\": \"set_groups\",\n            \"value\": [\n                \"member_of\"\n            ],\n            \"expression\": \".*\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/apps/{{app_id}}/rules/{{rule_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"apps",
										"{{app_id}}",
										"rules",
										"{{rule_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/apps/{{app_id}}/rules/{{rule_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"apps",
										"{{app_id}}",
										"rules",
										"{{rule_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Conditions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/apps/{{app_id}}/rules/conditions",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"apps",
										"{{app_id}}",
										"rules",
										"conditions"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Conditions Operators",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/apps/{{app_id}}/rules/conditions/{{rule_condition_value}}/operators",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"apps",
										"{{app_id}}",
										"rules",
										"conditions",
										"{{rule_condition_value}}",
										"operators"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Conditions Values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/apps/{{app_id}}/rules/conditions/{{rule_condition_value}}/values",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"apps",
										"{{app_id}}",
										"rules",
										"conditions",
										"{{rule_condition_value}}",
										"values"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Actions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/apps/{{app_id}}/rules/actions",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"apps",
										"{{app_id}}",
										"rules",
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Actions Values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/apps/{{app_id}}/rules/actions/{{rule_action_value}}/values",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"apps",
										"{{app_id}}",
										"rules",
										"actions",
										"{{rule_action_value}}",
										"values"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bulk Sort",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\t204500,\n    204499,\n    204503,\n    204502,\n    204501\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/apps/{{app_id}}/rules/sort",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"apps",
										"{{app_id}}",
										"rules",
										"sort"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Branding",
			"item": [
				{
					"name": "V2",
					"item": [
						{
							"name": "Brands",
							"item": [
								{
									"name": "List Brands",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{api-domain}}/api/2/branding/brands",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"branding",
												"brands"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Brand",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{api-domain}}/api/2/branding/brands/:brand_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"branding",
												"brands",
												":brand_id"
											],
											"variable": [
												{
													"key": "brand_id",
													"value": "{{brand_id}}"
												}
											]
										},
										"description": "Retrieve a single brand via ID"
									},
									"response": []
								},
								{
									"name": "Create Brand",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Sample Brand\",\n    \"enabled\": true,\n    \"custom_support_enabled\": true,\n    \"custom_color\": \"#C31A0F\",\n    \"custom_accent_color\": \"#7AC18E\",\n    \"custom_masking_color\": \"#EEFFEE\",\n    \"custom_masking_opacity\": 80,\n    \"enable_custom_label_for_login_screen\": true,\n    \"custom_label_text_for_login_screen\": \"Employee ID\",\n    \"login_instruction_title\": \"Welcome!\",\n    \"login_instruction\": \"Please log in!\",\n    \"hide_onelogin_footer\": true,\n    \"mfa_enrollment_message\": \"You need to enroll in MFA to continue to your portal\",\n    \"background\": \"iVBORw0KGgoAAAANSUhEUgAAAb8AAAG/CAYAAADIE9lyAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAFXxJREFUeNrs3b9vJOd9wOERoVY61rEOt+kEEQGZIoFVcf+Do4EgXXCrwEiRABFlpEshKpWqiNe4Mqy9pEpsQLzSDgwti+CEqDCvYODOS5yU+qj7A5h5jy/lPYt34pI7M++P5wGIlQHDImfX/PD7zjszr52dnTUAUJM1hwAA8QMA8QMA8QMA8QMA8QMA8QMA8QMA8QMA8QMA8QMA8QMA8QMA8QMA8QMA8QNA/ABA/ABA/ABA/ABA/AAgba87BNCN26ONrfZl/Qb/E/Mn8+O5Iwmr99rZ2ZmjAK+O2Kh9GcX/OI6vIWpbC/+18M+3evh2TkIUF/7zLL4+bb+O4j8ftdF86p0D8YNXxe0iZBeR21qI262Mf7SLUF58hTg+bcM4864jfuJHfRPceCF025UejtMYw6OFMJoYET8oIHTjhdjlPsX1OS1eRHEmiIgfpBu6iyXKsdB1GsSLGM4cEsQPhondeOFr01Hp3WGM4UwMET/oLng7YpdFDA/aGB45HIgfXC92o/blInh3HZGshM00BwsxdM4Q8YNXBG8cgxe+7jgixXjcfk1jCOcOB+KH4J0vZ1582aRSvpM4FU4tjyJ+CB5CCOJHgcELlx9M4pfgcVkI9xtLo4gfBQRvFKe73cY5PK4u7BydNjbLIH5kFr2dOOHZpclNXOwa3bcsiviR8pQ3iV+mPFYt7BjdNw0ifqQSvXFzvqxpyqOvaXAap8G5w4H40Xf0woS3Z8pjQA9jBGcOBeJHl8Fbj1Ne+LJjk1SEnaJ7bQSnDgXixyqjN4pTnuvySD2C0zgNOi+I+HHj6N1zNMhIOC+4L4KIH6KHCIL4IXqIIOKH6IkeIoj4UUn01mP03nc0qCyCYXfovkMhftQXPZcsUDuXSIgfFYVv0rg4HRYdxgjOHArxo7zojWP0th0NuNSDGMG5QyF+5B+9sMQZzm3YzALf7/mmmDaAew6F+JFv+HbjtOe8HiwnnA+cWAoVP/KK3jhOe5uOBtxIuHn2rqVQ8SPt6Ll0AVbPpRHiR8LhCzednjaWOKErh3EK9FR58SORaS9Ez8NkoR8f2RAjfpj2oEaPm/MNMaZA8cO0B6ZAxA/THtQyBe7YESp+dDfthb8w7eSE9NgRKn50EL6tOO25bg/SFq4LnHhkUvrWHILkwxfu0vJb4YMshPPw83ijCUx+XCN6NrVA3myGET+WDF9Y5jxoPHYIchcujN+xDJoey57phW/SnC9zCh/kLzxCbB7/oMXkxyXR8+ghKNsHdoOKHy+Gb9ScL3Pa1AJlCw/M3bUMKn7Cd74rLITPRetQh3BR/FgAh+Wc37Dhm7QvnwsfVCWs8DgPKH7Vhm/avnzqSECVwh+8v41/ADMAy579Ry9sbAnLnNuOBtC6/2R+vOswiF/J4Rs1NrYA3/WgDaApUPyKDF9Y3581zu8Bl7MRpkfO+fUTvrHwAd8jrAjN4goR4pd9+CaNHZ3A1QN4ZCeo+JUQPjs6gWXcihOgAIpfluHbFz7ghgGcOBTdsOGlm/BNG/foBFbjvSfz46nDYPITPqAmn5oAxU/4AAFE/IQPEEDET/gAAUT8hA8QQMRP+AABFD+EDxBA8UP4AAEUP4QPEMCSuMPLcuELHzC3LANSc9qcPw7pyKEw+QkfUAs3wzb5dRK+nfblM0cCyGAC3GonwLlDYfK7afjCX1JTRwLIZAI8aH9vrTsU4nfT8M0aD6IF8rEZf28hftcK33qc+IQPyC6AcWc64re0WfwLCiBH9+JDtRG/K099U+EDCvC+awAvZ7fnd8O327584kgABflz1wCK36vC55IGoEQugfgjlj3/ED6XNAClcgmE+F0aPjs7gdKFfQw2wIjfC6aNDS5A+e7FfQ3Vq/6cnw0uQIWq3wBTdfza8I3bl8/9/wCoTNgAM2oD+LTWA1Dtsmc8z3fg/wNAhW7V/vuv5nN+B40NLkC9ttshYE/86pr6whu+7bMPVO7DePqnOtWd83OeD+AFVZ7/q2ryW7ieD4Bzt2r8vVjbsmd4g+/4rAO84G5t1/9Vs+wZ72z+qc84wKWquv9nFZNfG75R47Y+AK9S1eUPtSx7ThuXNQB8n81aLn8oftnT7csAllb87c+KnvzicueezzHAUqal/4BrFbyBljsBllP88mexy56WOwFurNjlzyInP8udACtR7C75tYLfMMudADezXerF78Ute7Zv1E778pnPLMBKFHnxe1GTX7x3p4vZAVbnVom/V0tb9gzjuXt3AqzW3dIefVTMsmfc5PJ7n1GATpw8mR+PTH7pmfpsAnTmTknX/hUx+dnkAtCLYja/lDL52eQC0L2w+aWI6S/7+MUx3CYXgH7cK2HzS9bxi5c27PosAvQq++kv98nPnVwA+hfu/DLJ+QfIdsOLSxsABpX1pQ85T35Tnz2AwdzJ+b6fWU5+8WTr5z57AIMKlz6M2gnwqcmvH3s+cwCDC3suspz+spv8TH0Apr8aJz9TH4Dpr57Jz9QHYPqrcfIz9QGY/uqZ/Ex9AKa/Gic/Ux+A6a+eyc/UB2D6q3HyM/UBmP7qiV879W21L9s+UwBZmIjfanhkEUA+7uTwxIekz/l5cgNAlpJ/4kPqk9/EZwggy+lvLH7Xm/o8pR0gX3vidz07jae0A+RqO566Er+S/moA4Hslu3qX5IYXF7UDFCHZi95TnfwmPjMA2QunrnZS/MaSi1/c6HLPZwagCEkufaY4+Zn6AMqxGe/UJX45/pUAQDm/15OKX9zocsfnBKAoO/GUlvi9xMRnBKA4yW18SSZ+8a+CHZ8RgCIlNdykNPm5owtAuZK640tq8QOgXMn8nk8ifvGvgbs+FwBFS2bXZyqTn6kPoHx3UrnmL5X4TXwmAKqQxO/7weMXlzw3fR4AqpDESt/rDgQ5evPNN5q//qsfNe+++xfP/5lXOz7+XfOzn/9789VXXzsYDO350ueT+fHRkN/E4I80ag/CkcmPZWy883bzi/+YNm+8IXrL+vHf/WPzq1//xoFgaPfb+A26+WXQ+MUlz9/7HLDMxPfFf/+X8F3Ts2fPmnf+7IcOBEM7aeM3GvIbGPqcnyVPlhKWOoXv+sKxC5MzDGzwXZ9Dx2/sM8Aywjk+bj49QwIG/f0/WPzivTxd2I5f3FCnSa2TnyVPgHptDvmYoyHjN/beA1RtsCHI5AdAdUPQIPGLu3w8vgjA5FfV5Df2ngNU79ZQlzwMFT9LngAM1oOh4rft/QagGWglsPf4tSPu2HsNwJDD0BCTn/gBMOhQJH4ADK2K+DnfB0A98XO+D4AUhqK+Jz/xA2Dw4Uj8AEhBrxe7r5X8wwGQjTInv3akHTXu5wlAZZPf2HsLwEvc6fP5fn3Gz5InAEkMSeIHQCp660Sf8XNxOwD1xC9udgGAqiY/S54AfJ/eNr2IHwDVTX/iB4D4dWTk/QQglV70Fb9N7ycA1Ux+t0cbljwBqCt+jSVPAK6ul3tA9xE/kx8AV9bHs/1MfgCkpvNr/cQPgNR0vmIofgCkpvNu9BG/O95HAKqJnxtaA1Dj5Cd+ACyr8xXDruO37j0EYFldP92h6/i5xg+A5Pqx5viSk2++eeYgAMnHb+wQs0qPHn3pIIDJz+RHXf7zl581z56Z/qACWZ/zg5UKy54ffvSxAAI38nrH//vbDjGr9otfHjSPvviy+fHf/k2zsfF289ZbP2je+sGfODBQlnHO8YNOfPXV183ev3w8yL/7J7v/0Hyw+/feBMiYZU8AxG9VPMEdgBsY5Tr5ubsLANfV6S3OLHsCUB3xA0D8AED8rm/s8AJwXV1unDT5AZCqzjZOih8A1RE/AMQPAMQPAMQPAMQPAMQPAMQPAMQPAMQPAMQPAMQPAMQPAMQPAMQPAPqO35HDC8B1PZkfz3KM31NvHQC1TX4AIH4AIH4AcLnTLOPX5YlKAIrX6aZJkx8A1RE/AMRvxR47xABcQ9bLnq71AyC5flj2BKA6XcfPLc4AuI5ZzvGz7AlAdZPf3CEGILV+iB8AyXkyP846fpY9AVjWadf/gk7j15bbhhcAltV5O/q41OHU+wjAEjpfNewjfqY/AKqb/Jz3A2AZc5MfAOKXYfzm3kcAUhqaxA+ApDyZH+e/4cUT3QFYwmEf/5K+nupw4v0E4ArmJcVv7v0EoLb4zbyfAKTSC5MfACY/8QNgIKddP82h1/jZ8QnAFfR2U5S1Hn+ox95XAGqLn9ucASB+ACB+ANTqtM8HoPcWP5teAEhlQFrr+Yc79P4CcIleB6S+42fpE4Dq4jfz/gIw9HAkfgAM7XEfz/AbLH7xh3OxOwCDDkZrNfyQAIif+AEgfuIHwEB6P983SPyc9wNg6IForaYfFgDxEz8ABvVkfnxQTfyG+mEBSMpgt7xcG/CHfuh9B6jaYIPQkPGbed8BxK+2+Fn6BKjXyZP58by6+MUf2iUPAKa+qia/YOb9BxC/2uI39f4DVOf0yfx40OFn0Pi1P3x4ftOJzwGAqa+myS+JgwCA+PVt6nMAUI3TFG50Mnj8LH0CmPpqnPySORgAiF+fpj4PAMU7TeXezknEz9InQBWSGXTWEjoo+z4XAOJXW/yc9wMo10lc5RO/RfFenx5zBFCmpFb31hI7OKY/knf8v79zECDz3+9Jxa+d/qbty6nPCCn75ptvMv/+n3kT6dvDIR9flMPkZ/ojeY+++LJ59izPgHz19f+ZXBnCNLVvKMX42fVJ8v71k59m+X3vffSxN4++naRybV/S8Yu7gQ59XkjZz37+b80n+z/NZgIM3+dP/umfm1/9+jfePKqf+oLXzs7Okvumbo82Ju3Lpz4zpO7NN99o3v3hXzYb77yd7PcYljkfffE/zvUxlD9N7XxfsvGLAXzavtzyuQHIVtjospPiN7aW8EFz7g8gb8n+Hk85flOfG4BshY0uM/FbUlwjfuDzA5ClvZS/ubXED57pDyA/p/GmJeJ3zekvjMwuewDIS/J7NtYcRABWOfWJ32qmv3BnAA+6BcjDQft7+6n4rcaezxOA39dVxS+eODX9AaTtQYp3c8l58jP9Afg9XV/8TH8Apr4aJz/TH4Dfz/XFz/QHYOqrcfIz/QH4vVxf/Ex/AKa+Gic/0x+A38f1xc/0B2Dqq3HyCyY+dwCDCffw3M31m882fp74ADCo/Rzu4Vni5Bfs+fwB9C6cdsr6iTtZxy9Of572DtDz4JHz1FfC5Hcx/Z36LAL04nHqT2mvIn5xp5EH3gL0Y7eEH+K1s7OzIt6N26ONEME7PpcAnQmXNkxK+EHWCnpTdn0uATqT9aUNxcav/WvkoHHpA0BXst/kUurkF0wam18AVi1scilqb0VR8bP5BaATxZ1WKmbDy6Lbo42j9mXT5xXgxu63g0Vx8Vsr9M2y+QXg5sJppL0Sf7Ai4xfv/HLf5xbgRiYlbXKpYfJr4l8rHnsEcD0P4y76IhUbv/jXysTnF2Bpp6X//ix58rP8CXA9xS53VhG/aK+x/AlwVUUvd1YTP8ufAFdW/HJnTZOf5U+Aqyl+ufNCkRe5v4yL3wFeqsiL2aue/Bb/qvH5BviOx02hF7OLX/N8+TNMfh/4nAO8OBjUstxZ6+TXxDuTP/RZB3jugzgYVGWt0jd70rj8AeBhaY8qEr9XT39hvN/xuQcqdtJUvA+i1snP+T+gdju1necTvz8E0Pk/oEZVnucTvxeFsf+xwwBU4kGt5/nE78Xp7+L2Z6f+PwEULvyh72Hf4vdtAI8aF8ADZQt/4Fd9nk/8Lg9guIv5R44EUKgQvrnDIH6XBXCvfXngSACFeS/e4B/xe6mwHm4DDFCKsMFl6jC8qKqnOlzV7dHGevsSlgduORpAxg7b8I0dBpPflcQTwuEDYwcokKuwguVOVuK3dADtAAVyZWen+N0ogGEH6HuOBJBZ+MZ2dorfTQM4bV/uOxJAJia137pM/FYXwLAD1CUQQOreiytWiN/KAjgRQCDx8E0dBvHrgmsAgRS5lk/8Op3+Li6BEEAgpfBNHAbxE0BA+BA/AQSED/ETQED4xA8BBIRP/BBAQPjEDwEEhE/8EEBA+MQPAQSET/wEUAAB4RO/KgP40NEArukD4evOa2dnZ45Ch26PNqbtyz1HAliCm1Sb/LKfAsNfbp4HCFzFqfCZ/EqbAEMEP3UkgFeEb+xBtCa/0ibA8Jfcj+IHHGDRY+Ez+ZU+AW61L7P265ajASyE76lDIX6lB3A9BnDT0YCquZRhIJY9B7BwKcQDRwOq5VIGk1/VU+Be+/KhIwHVCOf9J234DhwK8as9gDvty7RxHhBK9ziGz8aWgVn2TED8C3DcuCUalCzc8cmOTpMfl0yA63ECvOtoQFE+aqO35zCIH6+O4G778okjAdkL5/d22vDNHArx42oBDNcDhuXQO44GZOkwhs/1e+LHkgG0DAp5sswpfqwggpZBIQ8nzfluzplDIX6sJoBbcQp0VxhI08MYPsuc4kcHEdxvX953JCAZYVPLrscQiR/dB3Acp0CbYWBYh3HamzsU4kc/AQybYfZMgTDYtLfXRm/foRA/TIFg2kP8MAWCaQ/xwxQIeQo7OXdNe+JH2hEMU2C4NtBTIuBmTmL0PH5I/MgkgKM4BW47GnAt95vzZU7X7YkfGUYwPCswnKOwFApXcxinPY8eEj8yD2DYELPbWAqFV7HEKX4UGsFRc74r9J6jAd8KuzjD6si+JU7xo+wIjmMEnQ+kdg/itCd64kdlEZw2zgdSHxeqi5/4ieDGJE6CIkgN0dvzyCHEDxFE9BA/EEFED/FDBEUQ0UP8EEEQPcSPeiIY7hYTLpR3iQSpCZcs7LsrC+JHlxEcty9hGnSxPEMKF6dPY/TmDgfiR18RHMUIum0afQq3Idtrvw5cnI74MXQIJzGElkTpSljanDqfh/iRYgS34iS4YxpkRVPeNEZv7nAgfpgGKVU4l3dgykP8yD2CozgJhonQ5RK8zGGc8pzLQ/woLoRbcRrcEUJajxeCN3c4ED+EEMED8aOSEI7br01HpDhhSfNA8BA/eHkIR3EaDCG864hk6WLTyqxxDg/xg2vF8CKEpsL0p7uL2LnNGOIHKwzh+sJUuCWGg8fuKMZu5nAgftBvDMcLMXRNYTdOY+hC5GZih/hBekG8COGW6fDGU93zL8uYiB/kG8RR/LqIo9uvnd8+7Gjhay50iB/UFcUQxPUCwxgCN1/4EjnET/zgpWFcjOH6wj83MZYpXJgfLhi/uIxgFl+/DZ1r6kD8oOsJctFiKG9i9kf/+amJDcQPAJa25hAAIH4AIH4AIH4AIH4AIH4AIH4AIH4AIH4AIH4AIH4AIH4AIH4AIH4AIH4AIH4AiB8AiB8AiB8AiB8AiB8ApO3/BRgAt/sE3Me4zZAAAAAASUVORK5CYII=\"\n}"
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/branding/brands",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"branding",
												"brands"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Create a new Account Brand"
									},
									"response": []
								},
								{
									"name": "Update Brand",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"custom_color\": \"#beeeef\",\n    \"custom_accent_color\": \"#feeeeb\",\n    \"enable_custom_label_for_login_screen\": true,\n    \"custom_label_text_for_login_screen\": \"YOUR TRUE NAME\"\n}"
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/branding/brands/:brand_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"branding",
												"brands",
												":brand_id"
											],
											"variable": [
												{
													"key": "brand_id",
													"value": "{{brand_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Brand",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{api-domain}}/api/2/branding/brands/:brand_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"branding",
												"brands",
												":brand_id"
											],
											"variable": [
												{
													"key": "brand_id",
													"value": "{{brand_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Brand Apps",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{api-domain}}/api/2/branding/brands/:brand_id/apps",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"branding",
												"brands",
												":brand_id",
												"apps"
											],
											"variable": [
												{
													"key": "brand_id",
													"value": "{{brand_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SMTP",
							"item": [
								{
									"name": "Get Email Settings",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{api-domain}}/api/2/branding/email_settings",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"branding",
												"email_settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Custom Email Settings",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{api-domain}}/api/2/branding/email_settings",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"branding",
												"email_settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Custom Email Settings",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"address\": \"smtp.sendgrid.net\",\n   \"use_tls\": true,\n   \"from\": \"email@example.com\",\n   \"domain\": \"example.com\",\n   \"user_name\": \"user-name\",\n   \"password\": \"password\",\n   \"port\": 587\n}\n"
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/branding/email_settings",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"branding",
												"email_settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test Email Settings",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{api-domain}}/api/2/branding/email_settings/test",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"branding",
												"email_settings",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test Email Settings Configuration",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{api-domain}}/api/2/branding/email_settings/test",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"branding",
												"email_settings",
												"test"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Templates",
							"item": [
								{
									"name": "List Templates",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{api-domain}}/api/2/branding/brands/:brand_id/templates",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"branding",
												"brands",
												":brand_id",
												"templates"
											],
											"variable": [
												{
													"key": "brand_id",
													"value": "{{brand_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Template",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"email_forgot_password\",\n    \"locale\": \"es\",\n    \"template\": {\n        \"subject\": \"Password Reset\",\n        \"html\": \"<html><head></head><body><p>Please update your password by clicking <a href={{url}}>this link</a></p></body></html>\",\n        \"plain\": \"Please update your password by visiting this url: {{url}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/branding/brands/:brand_id/templates",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"branding",
												"brands",
												":brand_id",
												"templates"
											],
											"variable": [
												{
													"key": "brand_id",
													"value": "{{brand_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Template",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{api-domain}}/api/2/branding/brands/:brand_id/templates/:template_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"branding",
												"brands",
												":brand_id",
												"templates",
												":template_id"
											],
											"variable": [
												{
													"key": "brand_id",
													"value": "{{brand_id}}"
												},
												{
													"key": "template_id",
													"value": "{{template_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Template by Type",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{api-domain}}/api/2/branding/brands/:brand_id/templates/:template_type",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"branding",
												"brands",
												":brand_id",
												"templates",
												":template_type"
											],
											"variable": [
												{
													"key": "brand_id",
													"value": "{{brand_id}}"
												},
												{
													"key": "template_type",
													"value": "{{template_type}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Template by Type & Locale",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{api-domain}}/api/2/branding/brands/:brand_id/templates/:template_type/:locale",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"branding",
												"brands",
												":brand_id",
												"templates",
												":template_type",
												":locale"
											],
											"variable": [
												{
													"key": "brand_id",
													"value": "{{brand_id}}"
												},
												{
													"key": "template_type",
													"value": "{{template_type}}"
												},
												{
													"key": "locale",
													"value": "{{locale}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Master Template by Type",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{api-domain}}/api/2/branding/brands/master/templates/:template_type",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"branding",
												"brands",
												"master",
												"templates",
												":template_type"
											],
											"variable": [
												{
													"key": "template_type",
													"value": "{{template_type}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Template",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{api-domain}}/api/2/branding/brands/:brand_id/templates/:template_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"branding",
												"brands",
												":brand_id",
												"templates",
												":template_id"
											],
											"variable": [
												{
													"key": "brand_id",
													"value": "{{brand_id}}"
												},
												{
													"key": "template_id",
													"value": "{{template_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Template",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{api-domain}}/api/2/branding/brands/:brand_id/templates/:template_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"branding",
												"brands",
												":brand_id",
												"templates",
												":template_id"
											],
											"variable": [
												{
													"key": "brand_id",
													"value": "{{brand_id}}"
												},
												{
													"key": "template_id",
													"value": "{{template_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Connectors",
			"item": [
				{
					"name": "V2",
					"item": [
						{
							"name": "List Connectors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"// Tests ",
											"pm.test(\"Response time is less than 1s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"auth_method\": {",
											"                \"type\": \"integer\"",
											"            },                ",
											"            \"name\": {",
											"                \"type\": \"string\"",
											"            },                ",
											"            \"allows_new_parameters\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"icon_url\": {",
											"                \"type\": \"string\"",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/connectors",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"connectors"
									],
									"query": [
										{
											"key": "auth_method",
											"value": "2",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "2",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "MFA",
			"item": [
				{
					"name": "V1",
					"item": [
						{
							"name": "Get Available Factors",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/1/users/{{user_id}}/auth_factors",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users",
										"{{user_id}}",
										"auth_factors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enroll a Factor",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"factor_id\": {{factor_id}},\n  \"display_name\":  \"Sample Factor\",\n  \"number\": \"5558675309\"\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/users/{{user_id}}/otp_devices",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users",
										"{{user_id}}",
										"otp_devices"
									]
								},
								"description": "Enroll an Authentication Factor"
							},
							"response": []
						},
						{
							"name": "Get Enrolled Factors",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/1/users/{{user_id}}/otp_devices",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users",
										"{{user_id}}",
										"otp_devices"
									]
								},
								"description": "Get Enrolled Factors"
							},
							"response": []
						},
						{
							"name": "Activate a Factor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"state_token\", jsonData.data[0].state_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"state_token_expires_in\": 300\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/users/{{user_id}}/otp_devices/{{device_id}}/trigger",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users",
										"{{user_id}}",
										"otp_devices",
										"{{device_id}}",
										"trigger"
									]
								},
								"description": "Activate a Factor"
							},
							"response": []
						},
						{
							"name": "Verify a Factor",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"state_token\": \"{{state_token}}\",\n\t\"otp_token\": \"{{otp_token}}\"\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/users/{{user_id}}/otp_devices/{{device_id}}/verify",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users",
										"{{user_id}}",
										"otp_devices",
										"{{device_id}}",
										"verify"
									]
								},
								"description": "Verify a Factor"
							},
							"response": []
						},
						{
							"name": "Remove an Enrolled Factor",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/users/{{user_id}}/otp_devices/{{device_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users",
										"{{user_id}}",
										"otp_devices",
										"{{device_id}}"
									]
								},
								"description": "Remove an enrolled MFA device for a user"
							},
							"response": []
						},
						{
							"name": "Generate Temp MFA Token",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"expires_in\": \"300\",\n   \"reusable\": false\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/users/{{user_id}}/mfa_token",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users",
										"{{user_id}}",
										"mfa_token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "V2",
					"item": [
						{
							"name": "get user factors",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/mfa/users/{{user_id}}/factors",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"mfa",
										"users",
										"{{user_id}}",
										"factors"
									]
								},
								"description": "Get a user\\'s available authentication factors"
							},
							"response": [
								{
									"name": "A list of authentication factors",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{api-domain}}/users/:user_id/factors",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"users",
												":user_id",
												"factors"
											],
											"variable": [
												{
													"key": "user_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"factor_id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"auth_factor_name\": \"<string>\"\n },\n {\n  \"factor_id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"auth_factor_name\": \"<string>\"\n }\n]"
								}
							]
						},
						{
							"name": "create user factor registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// For Convenience",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"registration_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"factor_id\": {{factor_id}},\n    \"display_name\": \"Sample Device Name\"\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/mfa/users/{{user_id}}/registrations",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"mfa",
										"users",
										"{{user_id}}",
										"registrations"
									]
								},
								"description": "Create a new registration process"
							},
							"response": [
								{
									"name": "Create user factor registration",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "bearer: {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"factor_id\": \"58959\",\n    \"display_name\": \"SMS\"\n}"
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/mfa/users/:user_id/registrations",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"mfa",
												"users",
												":user_id",
												"registrations"
											],
											"variable": [
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"description": "(Required) The user's id"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Accept-Language",
											"value": "en-US,en;q=1"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, must-revalidate, no-store"
										},
										{
											"key": "Content-Length",
											"value": "186"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Request-Id",
											"value": "5F188C90-49E1609A-D47D-0A0B03ED-01BB-2869-1581"
										},
										{
											"key": "Date",
											"value": "Wed, 22 Jul 2020 18:59:30 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"44aa6883-5048-4cd5-8cb2-64d47784230c\",\n    \"status\": \"pending\",\n    \"auth_factor_name\": \"SMS\",\n    \"type_display_name\": \"OneLogin SMS\",\n    \"user_display_name\": \"SMS\",\n    \"expires_at\": \"2020-07-22T19:01:29Z\"\n}"
								}
							]
						},
						{
							"name": "verify user registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// For Convenience",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"device_id\", jsonData.device_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"otp\": \"E6AF52\"\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/mfa/users/{{user_id}}/registrations/{{registration_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"mfa",
										"users",
										"{{user_id}}",
										"registrations",
										"{{registration_id}}"
									]
								},
								"description": "Submit an otp for verification."
							},
							"response": [
								{
									"name": "Verify user registration",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "bearer: {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"otp\": \"506C45\"\n}"
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/mfa/users/:user_id/registrations/:registration_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"mfa",
												"users",
												":user_id",
												"registrations",
												":registration_id"
											],
											"variable": [
												{
													"key": "user_id",
													"value": "{{user_id}}"
												},
												{
													"key": "registration_id",
													"value": "<UUID>",
													"description": "(Required) The id of a registration"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Accept-Language",
											"value": "en-US,en;q=1"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, must-revalidate, no-store"
										},
										{
											"key": "Content-Length",
											"value": "87"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Request-Id",
											"value": "5F188CDE-49E1609A-D480-0A0B0591-01BB-3589-0813"
										},
										{
											"key": "Date",
											"value": "Wed, 22 Jul 2020 19:00:47 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"44aa6883-5048-4cd5-8cb2-64d47784230c\",\n    \"status\": \"accepted\",\n    \"device_id\": \"3926157\"\n}"
								}
							]
						},
						{
							"name": "get user registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// For Convenience",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"device_id\", jsonData.device_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/mfa/users/{{user_id}}/registrations/{{registration_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"mfa",
										"users",
										"{{user_id}}",
										"registrations",
										"{{registration_id}}"
									]
								},
								"description": "Get registration state by id"
							},
							"response": [
								{
									"name": "Get user registration",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "bearer: {{access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{api-domain}}/api/2/mfa/users/:user_id/registrations/:registration_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"mfa",
												"users",
												":user_id",
												"registrations",
												":registration_id"
											],
											"variable": [
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"description": "(Required) The user's id"
												},
												{
													"key": "registration_id",
													"value": "<UUID>",
													"description": "(Required) The id of a registration"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Accept-Language",
											"value": "en-US,en;q=1"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, must-revalidate, no-store"
										},
										{
											"key": "Content-Length",
											"value": "64"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Request-Id",
											"value": "5F188C46-49E1609A-D47B-0A0B033A-01BB-11459E-43E7"
										},
										{
											"key": "Date",
											"value": "Wed, 22 Jul 2020 18:58:14 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"ca332b26-0d83-444f-956b-0dbf004a3f03\",\n    \"status\": \"pending\"\n}"
								}
							]
						},
						{
							"name": "get user devices",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/mfa/users/{{user_id}}/devices",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"mfa",
										"users",
										"{{user_id}}",
										"devices"
									]
								},
								"description": "Get a user authentication devices"
							},
							"response": [
								{
									"name": "A list of authentication devices",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{api-domain}}/users/:user_id/devices",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"users",
												":user_id",
												"devices"
											],
											"variable": [
												{
													"key": "user_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"type\": \"boolean\",\n  \"default\": \"<boolean>\"\n },\n {\n  \"type\": \"boolean\",\n  \"default\": \"<boolean>\"\n }\n]"
								}
							]
						},
						{
							"name": "create user device verification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// For Convenience",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"verification_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"device_id\": {{device_id}},\n    \"expires_in\": 240\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/mfa/users/{{user_id}}/verifications",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"mfa",
										"users",
										"{{user_id}}",
										"verifications"
									]
								},
								"description": "Create a new verification process"
							},
							"response": [
								{
									"name": "Created verification flow",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"device_id\": \"113242\",\n    \"expires_in\": 120\n}"
										},
										"url": {
											"raw": "https://{{api-domain}}/users/:user_id/verifications",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"users",
												":user_id",
												"verifications"
											],
											"variable": [
												{
													"key": "user_id"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"expires_at\": \"2020-07-11T22:24:50Z\",\n \"user_display_name\": \"Testing SMS DEMO\",\n \"type_display_name\": \"OneLogin SMS\",\n \"auth_factor_name\": \"SMS\",\n \"id\": \"5a0ba80a-39a1-4627-9a8b-1273278b34ee\",\n \"status\": \"pending\",\n \"user_id\": 2323,\n \"device_id\": \"489339\",\n \"factor_data\": {\n  \"verification_token\": \"<string>\",\n  \"totp_url\": \"<string>\"\n }\n}"
								}
							]
						},
						{
							"name": "verify user verification",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"otp\": \"41ACED\"\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/mfa/users/{{user_id}}/verifications/{{verification_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"mfa",
										"users",
										"{{user_id}}",
										"verifications",
										"{{verification_id}}"
									]
								},
								"description": "Submit an otp for verification."
							},
							"response": [
								{
									"name": "Verification code received. State updated.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"otp\": \"213932\"\n}"
										},
										"url": {
											"raw": "https://{{api-domain}}/users/:user_id/verifications/:verification_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"users",
												":user_id",
												"verifications",
												":verification_id"
											],
											"variable": [
												{
													"key": "user_id"
												},
												{
													"key": "verification_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"5a0ba80a-39a1-4627-9a8b-1273278b34ee\",\n \"status\": \"pending\",\n \"expires_at\": \"2020-07-11T22:24:50Z\",\n \"device_id\": \"331991\"\n}"
								}
							]
						},
						{
							"name": "get user verification",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/mfa/users/{{user_id}}/verifications/{{verification_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"mfa",
										"users",
										"{{user_id}}",
										"verifications",
										"{{verification_id}}"
									]
								},
								"description": "Get verification state by id"
							},
							"response": [
								{
									"name": "Retrieved verification state",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{api-domain}}/users/:user_id/verifications/:verification_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"users",
												":user_id",
												"verifications",
												":verification_id"
											],
											"variable": [
												{
													"key": "user_id"
												},
												{
													"key": "verification_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"5a0ba80a-39a1-4627-9a8b-1273278b34ee\",\n \"status\": \"pending\",\n \"expires_at\": \"2020-07-11T22:24:50Z\",\n \"device_id\": \"331991\"\n}"
								}
							]
						},
						{
							"name": "delete user device",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/mfa/users/{{user_id}}/devices/{{device_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"mfa",
										"users",
										"{{user_id}}",
										"devices",
										"{{device_id}}"
									]
								},
								"description": "Delete a user\\'s authentication device"
							},
							"response": [
								{
									"name": "The device has been deleted",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{api-domain}}/users/:user_id/devices/:device_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"users",
												":user_id",
												"devices",
												":device_id"
											],
											"variable": [
												{
													"key": "user_id"
												},
												{
													"key": "device_id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "issue user temp otp",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"expires_in\": 120,\n    \"reusable\": false\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/mfa/users/{{user_id}}/mfa_token",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"mfa",
										"users",
										"{{user_id}}",
										"mfa_token"
									]
								},
								"description": "Create new MFA token on the user's account"
							},
							"response": [
								{
									"name": "Created Mfa Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"expires_in\": 120,\n    \"reusable\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/users/:user_id/temp_otp",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"users",
												":user_id",
												"temp_otp"
											],
											"variable": [
												{
													"key": "user_id",
													"value": "{{user_id}}"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"mfa_token\": \"UIOWE787979\",\n \"reusable\": true,\n \"expires_at\": \"2020-06-26T21:52:56Z\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Roles",
			"item": [
				{
					"name": "V1",
					"item": [
						{
							"name": "Get Roles",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/1/roles",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Role by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/1/roles/{{role_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"roles",
										"{{role_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "V2",
					"item": [
						{
							"name": "List Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/roles",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"roles"
									],
									"query": [
										{
											"key": "app_id",
											"value": "{{app_id}}",
											"disabled": true
										},
										{
											"key": "app_name",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"role_id\", jsonData.id);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Sample Role2\",\n    \"apps\": [],\n    \"users\": [],\n    \"admins\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/roles",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/roles/{{role_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"roles",
										"{{role_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Updated Role Name\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/roles/{{role_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"roles",
										"{{role_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Role Apps",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/roles/{{role_id}}/apps",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"roles",
										"{{role_id}}",
										"apps"
									],
									"query": [
										{
											"key": "assigned",
											"value": "false",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Role Apps",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[]"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/roles/{{role_id}}/apps",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"roles",
										"{{role_id}}",
										"apps"
									]
								},
								"description": "Supply the full list of apps that should be assigned to this role. Apps will either be added or removed based on their presence in this list. "
							},
							"response": []
						},
						{
							"name": "Get Role Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/roles/{{role_id}}/users",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"roles",
										"{{role_id}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Role Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{{user_id}}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/roles/{{role_id}}/users",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"roles",
										"{{role_id}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Role Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{{user_id}}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/roles/{{role_id}}/users",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"roles",
										"{{role_id}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Role Admins",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/roles/{{role_id}}/admins",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"roles",
										"{{role_id}}",
										"admins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Role Admins",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{{user_id}}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/roles/{{role_id}}/admins",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"roles",
										"{{role_id}}",
										"admins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Role Admins",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{{user_id}}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/roles/{{role_id}}/admins",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"roles",
										"{{role_id}}",
										"admins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/roles/{{role_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"roles",
										"{{role_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "SAML Assertions",
			"item": [
				{
					"name": "V1",
					"item": [
						{
							"name": "Generate SAML Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.response.code == 200) {",
											"  var jsonData = pm.response.json();",
											"  jsonData = jsonData.data[0].state_token;",
											"  pm.environment.set(\"state_token\", jsonData);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"password\": \"<password of the user accessing the app>\",\n    \"subdomain\": \"{{subdomain}}\",\n    \"username_or_email\": \"<Username or email of the user accessing the app>\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/saml_assertion",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"saml_assertion"
									]
								},
								"description": "Generate SAML Assertion"
							},
							"response": [
								{
									"name": "Using valid parameters",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"password\": \"{{password}}\",\n    \"subdomain\": \"{{subdomain}}\",\n    \"username_or_email\": \"{{username_or_email}}\",\n    \"ip_address\": \"{{$randomIP}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/1/saml_assertion",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"1",
												"saml_assertion"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Using a blank IP",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"password\": \"{{password}}\",\n    \"subdomain\": \"{{subdomain}}\",\n    \"username_or_email\": \"{{username_or_email}}\",\n    \"ip_address\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/1/saml_assertion",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"1",
												"saml_assertion"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Using incomplete IP",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"password\": \"{{password}}\",\n    \"subdomain\": \"{{subdomain}}\",\n    \"username_or_email\": \"{{username_or_email}}\",\n    \"ip_address\": \"100.0\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/1/saml_assertion",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"1",
												"saml_assertion"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "cache-control",
											"value": "no-cache"
										},
										{
											"key": "content-type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "date",
											"value": "Thu, 29 Apr 2021 22:37:57 GMT"
										},
										{
											"key": "status",
											"value": "400 Bad Request"
										},
										{
											"key": "x-frame-options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "x-ratelimit-limit",
											"value": "5000"
										},
										{
											"key": "x-ratelimit-remaining",
											"value": "4987"
										},
										{
											"key": "x-ratelimit-reset",
											"value": "3356"
										},
										{
											"key": "x-request-id",
											"value": "608B3545-944069C8-2240-0A0D16CD-01BB-31E68-0009"
										},
										{
											"key": "x-runtime",
											"value": "0.275063"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "content-length",
											"value": "105"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": {\n        \"error\": true,\n        \"code\": 400,\n        \"type\": \"bad request\",\n        \"message\": \"A valid IP address must be provided\"\n    }\n}"
								},
								{
									"name": "Using out of range IP",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"password\": \"{{password}}\",\n    \"subdomain\": \"{{subdomain}}\",\n    \"username_or_email\": \"{{username_or_email}}\",\n    \"ip_address\": \"999.999.999.999\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/1/saml_assertion",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"1",
												"saml_assertion"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Using IPv6",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"password\": \"{{password}}\",\n    \"subdomain\": \"{{subdomain}}\",\n    \"username_or_email\": \"{{username_or_email}}\",\n    \"ip_address\": \"5da4:c64c:f65:51ba:7a13:30ab:d217:73f4\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/1/saml_assertion",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"1",
												"saml_assertion"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "When password is expired",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "<token>",
												"description": "OAuth2 Access Token",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"password\": \"{{password}}\",\n    \"subdomain\": \"{{subdomain}}\",\n    \"username_or_email\": \"{{username_or_email}}\",\n    \"ip_address\": \"{{$randomIP}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/1/saml_assertion",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"1",
												"saml_assertion"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "cache-control",
											"value": "no-cache"
										},
										{
											"key": "content-type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "date",
											"value": "Fri, 07 May 2021 04:55:32 GMT"
										},
										{
											"key": "status",
											"value": "401 Unauthorized"
										},
										{
											"key": "x-frame-options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "x-ratelimit-limit",
											"value": "5000"
										},
										{
											"key": "x-ratelimit-remaining",
											"value": "4997"
										},
										{
											"key": "x-ratelimit-reset",
											"value": "3588"
										},
										{
											"key": "x-request-id",
											"value": "6094C843-944069C8-7B2B-0A0D177A-01BB-3C0B8-0007"
										},
										{
											"key": "x-runtime",
											"value": "0.595163"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "content-length",
											"value": "110"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": {\n        \"type\": \"Unauthorized\",\n        \"code\": 401,\n        \"message\": \"Authentication Failed: Password expired\",\n        \"error\": true\n    }\n}"
								}
							]
						},
						{
							"name": "Verify Factor SAML",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"device_id\": \"{{device_id}}\",\n    \"otp_token\": \"{{otp_token}}\",\n    \"state_token\": \"{{state_token}}\"\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/saml_assertion/verify_factor",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"saml_assertion",
										"verify_factor"
									]
								},
								"description": "Verify Factor SAML"
							},
							"response": [
								{
									"name": "Successful verification response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"device_id\": \"3036546\",\n    \"otp_token\": \"504160\",\n    \"state_token\": \"{{state_token}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/1/saml_assertion/verify_factor",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"1",
												"saml_assertion",
												"verify_factor"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "cache-control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "content-type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "date",
											"value": "Thu, 13 May 2021 01:48:51 GMT"
										},
										{
											"key": "etag",
											"value": "W/\"a2daff6f4e7a7009b2eaef407bb1c4f1\""
										},
										{
											"key": "status",
											"value": "200 OK"
										},
										{
											"key": "x-frame-options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "x-ratelimit-limit",
											"value": "5000"
										},
										{
											"key": "x-ratelimit-remaining",
											"value": "4968"
										},
										{
											"key": "x-ratelimit-reset",
											"value": "2424"
										},
										{
											"key": "x-request-id",
											"value": "609C8582-4C7E88C2-C031-0A0B019E-01BB-F0D47-34FD"
										},
										{
											"key": "x-runtime",
											"value": "1.096102"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "content-length",
											"value": "4404"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=63072000; includeSubDomains;"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": \"PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIElEPSJSNjM1YWQ0ZDI4OGQ5MTZlOTAyMzJhMTliM2FmZDNjZDQ3OTczOTA5NiIgVmVyc2lvbj0iMi4wIiBJc3N1ZUluc3RhbnQ9IjIwMjEtMDUtMTNUMDE6NDg6NTFaIiBEZXN0aW5hdGlvbj0ie3JlY2lwaWVudH0iPjxzYW1sOklzc3Vlcj5odHRwczovL2FwcC5vbmVsb2dpbi5jb20vc2FtbC9tZXRhZGF0YS9mODQyM2JmNi1jODU0LTQ3YjEtOGNlMi0zNDEyMzEzOGM5ZWI8L3NhbWw6SXNzdWVyPjxzYW1scDpTdGF0dXM+PHNhbWxwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbHA6U3RhdHVzPjxzYW1sOkFzc2VydGlvbiB4bWxuczpzYW1sPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIiB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIFZlcnNpb249IjIuMCIgSUQ9InBmeDczOTA3MGE4LTA1NjAtNGJkZi03Y2NkLWRlOWFjODFkMTI3NCIgSXNzdWVJbnN0YW50PSIyMDIxLTA1LTEzVDAxOjQ4OjUxWiI+PHNhbWw6SXNzdWVyPmh0dHBzOi8vYXBwLm9uZWxvZ2luLmNvbS9zYW1sL21ldGFkYXRhL2Y4NDIzYmY2LWM4NTQtNDdiMS04Y2UyLTM0MTIzMTM4YzllYjwvc2FtbDpJc3N1ZXI+PGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+PGRzOlNpZ25lZEluZm8+PGRzOkNhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIi8+PGRzOlJlZmVyZW5jZSBVUkk9IiNwZng3MzkwNzBhOC0wNTYwLTRiZGYtN2NjZC1kZTlhYzgxZDEyNzQiPjxkczpUcmFuc2Zvcm1zPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48L2RzOlRyYW5zZm9ybXM+PGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIi8+PGRzOkRpZ2VzdFZhbHVlPmdRb1gvQldJQ1E3SitLaldReWsxWWRzUGw1RT08L2RzOkRpZ2VzdFZhbHVlPjwvZHM6UmVmZXJlbmNlPjwvZHM6U2lnbmVkSW5mbz48ZHM6U2lnbmF0dXJlVmFsdWU+SWtTbkszVWhvTnFYNDA2TG50Vll6SnkxRkhiejBjSEg3M1hDWnFhOUlJaytYUkVaVkJMdTYvQUVHeGZIY1VHa1U5ay9Vd3U1WWxwdWFFVldYcTRrT3RJcUxNN0ZvNlNVeU5aR3pvQ3FkYkJTcWpLWWhFaXkxeE9ZWm11MmFkWHNtTThRSHM3WmgzVEMyaGk5bTJyU0xFZWYxOHRhRnUvUkR5NHVESnpIc1FBPTwvZHM6U2lnbmF0dXJlVmFsdWU+PGRzOktleUluZm8+PGRzOlg1MDlEYXRhPjxkczpYNTA5Q2VydGlmaWNhdGU+TUlJQnJUQ0NBYUdnQXdJQkFnSUJBVEFEQmdFQU1HY3hDekFKQmdOVkJBWVRBbFZUTVJNd0VRWURWUVFJREFwRFlXeHBabTl5Ym1saE1SVXdFd1lEVlFRSERBeFRZVzUwWVNCTmIyNXBZMkV4RVRBUEJnTlZCQW9NQ0U5dVpVeHZaMmx1TVJrd0Z3WURWUVFEREJCaGNIQXViMjVsYkc5bmFXNHVZMjl0TUI0WERURXdNVEV3TkRJek1qWTBPRm9YRFRFMU1URXdOREl6TWpZME9Gb3daekVMTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnTUNrTmhiR2xtYjNKdWFXRXhGVEFUQmdOVkJBY01ERk5oYm5SaElFMXZibWxqWVRFUk1BOEdBMVVFQ2d3SVQyNWxURzluYVc0eEdUQVhCZ05WQkFNTUVHRndjQzV2Ym1Wc2IyZHBiaTVqYjIwd2daOHdEUVlKS29aSWh2Y05BUUVCQlFBRGdZMEFNSUdKQW9HQkFMVVlZYUdXQnU5YVZpVWlMSmxPcDQ5OXZNZE4vY0FUZktHSVU4UVZ6bVRrU1NnbWRicG8rUkNpQWdOeWk1dEM5MnZxN09NQlBERWR2OFlxLy9lRk5kTEo5THFSbk1FNEFTc29xWWJZRmxpU0RxMUR5RlpMMzA5ZzhVeFRtNFQ5NGpIbEEvVGoxWjZaRms1aCtWQ2hyelBuWmxOY3pJSTlNaXhHVGtTOVdUZjdBZ01CQUFFd0F3WUJBQU1CQUE9PTwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE+PC9kczpLZXlJbmZvPjwvZHM6U2lnbmF0dXJlPjxzYW1sOlN1YmplY3Q+PHNhbWw6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6ZW1haWxBZGRyZXNzIj5yYWRpdXN0ZXN0MUBvbmVsb2dpbi5jb208L3NhbWw6TmFtZUlEPjxzYW1sOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDpTdWJqZWN0Q29uZmlybWF0aW9uRGF0YSBOb3RPbk9yQWZ0ZXI9IjIwMjEtMDUtMTNUMDE6NTE6NTFaIiBSZWNpcGllbnQ9IntyZWNpcGllbnR9Ii8+PC9zYW1sOlN1YmplY3RDb25maXJtYXRpb24+PC9zYW1sOlN1YmplY3Q+PHNhbWw6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMjEtMDUtMTNUMDE6NDU6NTFaIiBOb3RPbk9yQWZ0ZXI9IjIwMjEtMDUtMTNUMDE6NTE6NTFaIj48c2FtbDpBdWRpZW5jZVJlc3RyaWN0aW9uPjxzYW1sOkF1ZGllbmNlPnthdWRpZW5jZX08L3NhbWw6QXVkaWVuY2U+PC9zYW1sOkF1ZGllbmNlUmVzdHJpY3Rpb24+PC9zYW1sOkNvbmRpdGlvbnM+PHNhbWw6QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDIxLTA1LTEzVDAxOjQ4OjUwWiIgU2Vzc2lvbk5vdE9uT3JBZnRlcj0iMjAyMS0wNS0xNFQwMTo0ODo1MVoiIFNlc3Npb25JbmRleD0iXzRhNjI2ZDAwLTk1YmItMDEzOS1lNDI3LTBhMTBhMWExYjMwMyI+PHNhbWw6QXV0aG5Db250ZXh0PjxzYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOlBhc3N3b3JkUHJvdGVjdGVkVHJhbnNwb3J0PC9zYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDpBdXRobkNvbnRleHQ+PC9zYW1sOkF1dGhuU3RhdGVtZW50Pjwvc2FtbDpBc3NlcnRpb24+PC9zYW1scDpSZXNwb25zZT4KCg==\",\n    \"status\": {\n        \"message\": \"Success\",\n        \"error\": false,\n        \"type\": \"success\",\n        \"code\": 200\n    }\n}"
								},
								{
									"name": "Failed verification response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"device_id\": \"3036546\",\n    \"otp_token\": \"504160\",\n    \"state_token\": \"{{state_token}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/1/saml_assertion/verify_factor",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"1",
												"saml_assertion",
												"verify_factor"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "cache-control",
											"value": "no-cache"
										},
										{
											"key": "content-type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "date",
											"value": "Thu, 13 May 2021 01:49:49 GMT"
										},
										{
											"key": "status",
											"value": "401 Unauthorized"
										},
										{
											"key": "x-frame-options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "x-ratelimit-limit",
											"value": "5000"
										},
										{
											"key": "x-ratelimit-remaining",
											"value": "4967"
										},
										{
											"key": "x-ratelimit-reset",
											"value": "2365"
										},
										{
											"key": "x-request-id",
											"value": "609C85BD-4C7E88C2-C047-0A0B0590-01BB-FB027-371F"
										},
										{
											"key": "x-runtime",
											"value": "0.382838"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "content-length",
											"value": "109"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=63072000; includeSubDomains;"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": {\n        \"message\": \"Failed authentication with this factor\",\n        \"error\": true,\n        \"type\": \"Unauthorized\",\n        \"code\": 401\n    }\n}"
								}
							]
						}
					]
				},
				{
					"name": "V2",
					"item": [
						{
							"name": "Generate SAML Assertion",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"password\": \"<password of the user accessing the app>\",\n    \"subdomain\": \"{{subdomain}}\",\n    \"username_or_email\": \"<Username or email of the user accessing the app>\"\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/saml_assertion",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"saml_assertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Factor SAML",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"otp_token\": \"{{otp_token}}\",\n    \"device_id\": \"{{device_id}}\",\n    \"state_token\": \"{{state_token}}\"\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/saml_assertion/verify_factor",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"saml_assertion",
										"verify_factor"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Smart Hooks",
			"item": [
				{
					"name": "V2",
					"item": [
						{
							"name": "Pre-Authentication Hook",
							"item": [
								{
									"name": "Create minimum viable function",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"const functionString = `",
													"exports.handler = async (context) => {",
													"    console.log(context);",
													"    return {",
													"        success: true,",
													"        user: context.user",
													"    }",
													"}",
													"`;",
													"",
													"const b64function = Buffer.from(functionString).toString('base64');",
													"postman.setEnvironmentVariable(\"base64Function\", b64function);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// For Convenience",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"pre_authentication_hook_id\", jsonData.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"pre-authentication\",\n\t\"function\": \"{{base64Function}}\",\n\t\"disabled\": false,\n    \"runtime\": \"nodejs12.x\",\n    \"context_version\": \"1.1.0\",\n\t\"retries\": 0,\n\t\"timeout\": 1,\n\t\"env_vars\": [\n\t],\n\t\"packages\": {\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks"
											]
										},
										"description": "This function simply passes the user immediately back without making any changes to user policy. It is effectively a waste of time having a hook like this but it serves the purpose of showing what a minimum viable pre-authentication hook would look like."
									},
									"response": []
								},
								{
									"name": "Update minimum viable function",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"const functionString = `",
													"exports.handler = async (context) => {",
													"    console.log(context);",
													"    return {",
													"        success: true,",
													"        user: context.user",
													"    }",
													"}",
													"`;",
													"",
													"const b64function = Buffer.from(functionString).toString('base64');",
													"postman.setEnvironmentVariable(\"base64Function\", b64function);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"pre-authentication\",\n\t\"function\": \"{{base64Function}}\",\n\t\"disabled\": false,\n    \"runtime\": \"nodejs12.x\",\n\t\"retries\": 0,\n\t\"timeout\": 1, \n\t\"env_vars\": [\n\t],\n\t\"packages\": {\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks/:hook_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks",
												":hook_id"
											],
											"variable": [
												{
													"key": "hook_id",
													"value": "{{pre_authentication_hook_id}}"
												}
											]
										},
										"description": "This function simply passes the user immediately back without making any changes to user policy. It is effectively a waste of time having a hook like this but it serves the purpose of showing what a minimum viable pre-authentication hook would look like."
									},
									"response": []
								},
								{
									"name": "Deny Access based on Country Code",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"const functionString = `",
													"exports.handler = async (context) => {",
													"    console.log(\"Context \", context);",
													"",
													"    // Deny access",
													"    if (context.location.country_code != \"NZ\") return { success: false, user: null };",
													"    ",
													"    return {",
													"        success: true,",
													"        user: context.user",
													"    };",
													"}",
													"`;",
													"",
													"const b64function = Buffer.from(functionString).toString('base64');",
													"postman.setEnvironmentVariable(\"base64Function\", b64function);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"pre-authentication\",\n\t\"function\": \"{{base64Function}}\",\n\t\"disabled\": false,\n    \"runtime\": \"nodejs12.x\",\n\t\"retries\": 0,\n\t\"timeout\": 1,\n    \"options\":{\n\t    \"risk_enabled\": true,\n    \t\"location_enabled\": true,\n        \"mfa_device_info_enabled\": false\n    },  \n\t\"env_vars\": [\n\t],\n\t\"packages\": {\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks/:hook_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks",
												":hook_id"
											],
											"variable": [
												{
													"key": "hook_id",
													"value": "{{pre_authentication_hook_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Only Allow users from specific countries to login",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"const functionString = `",
													"exports.handler = async context => {",
													"  // A list of ISO 3166 Alpha 2 character country codes",
													"  // https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2",
													"  const ALLOWED_COUNTRY_CODES = [\"US\", \"NZ\"]",
													"",
													"  let allowAccess = ALLOWED_COUNTRY_CODES.includes(context.location.country_code);",
													"",
													"  return {",
													"    success: allowAccess,",
													"    user: context.user",
													"  };",
													"};",
													"`;",
													"",
													"const b64function = Buffer.from(functionString).toString('base64');",
													"postman.setEnvironmentVariable(\"base64Function\", b64function);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"pre-authentication\",\n\t\"function\": \"{{base64Function}}\",\n\t\"disabled\": false,\n    \"runtime\": \"nodejs12.x\",\n\t\"retries\": 0,\n\t\"timeout\": 1,\n    \"options\":{\n\t    \"risk_enabled\": false,\n    \t\"location_enabled\": true,\n        \"mfa_device_info_enabled\": false\n    },  \n\t\"env_vars\": [\n\t],\n\t\"packages\": {\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks/:hook_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks",
												":hook_id"
											],
											"variable": [
												{
													"key": "hook_id",
													"value": "{{pre_authentication_hook_id}}"
												}
											]
										},
										"description": "This Smart Hook will block all users from logging in unless they come from one of the listed countries. "
									},
									"response": []
								},
								{
									"name": "Require MFA based on Country Code",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"const functionString = `",
													"exports.handler = async (context) => {",
													"    console.log(\"Context \", context);",
													"    ",
													"    var user = context.user;",
													"    const policy_id = (context.location.country_code == \"NZ\") ? 135379 : user.policy_id",
													"",
													"    return {",
													"        success: true,",
													"        user: { ...user, policy_id }",
													"    }",
													"}",
													"`;",
													"",
													"const b64function = Buffer.from(functionString).toString('base64');",
													"postman.setEnvironmentVariable(\"base64Function\", b64function);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"pre-authentication\",\n\t\"function\": \"{{base64Function}}\",\n\t\"disabled\": false,\n    \"runtime\": \"nodejs12.x\",\n\t\"retries\": 0,\n\t\"timeout\": 1,\n    \"options\":{\n\t    \"risk_enabled\": false,\n    \t\"location_enabled\": true,\n        \"mfa_device_info_enabled\": false\n    },  \n\t\"env_vars\": [\n\t],\n\t\"packages\": {\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks/:hook_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks",
												":hook_id"
											],
											"variable": [
												{
													"key": "hook_id",
													"value": "{{pre_authentication_hook_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Deny Access to IE 11",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"const functionString = `",
													"const parser = require('ua-parser-js');",
													"",
													"const isIe11 = ({ name, version }) => name == \"IE\" && version == \"11.0\";",
													"",
													"const ie11PolicyOverride = ({ user, device }) => {",
													"    const { browser } = parser(device.user_agent);",
													"    ",
													"    if (isIe11(browser)) return { success: false, user: null };",
													"",
													"    return {",
													"        success: true,",
													"        user: user",
													"    }",
													"} ",
													"",
													"exports.handler = async (context) => {",
													"    return ie11PolicyOverride(context);",
													"}",
													"`;",
													"",
													"const b64function = Buffer.from(functionString).toString('base64');",
													"postman.setEnvironmentVariable(\"base64Function\", b64function);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"pre-authentication\",\n\t\"function\": \"{{base64Function}}\",\n\t\"disabled\": false,\n    \"runtime\": \"nodejs12.x\",\n\t\"retries\": 0,\n\t\"timeout\": 1,\n    \"options\":{\n\t    \"risk_enabled\": true,\n    \t\"location_enabled\": true,\n        \"mfa_device_info_enabled\": false\n    },  \n\t\"env_vars\": [\n\t],\n\t\"packages\": {\n\t\t\"ua-parser-js\": \"0.7.21\"\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks/:hook_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks",
												":hook_id"
											],
											"variable": [
												{
													"key": "hook_id",
													"value": "{{pre_authentication_hook_id}}"
												}
											]
										},
										"description": "This hook uses an NPM package to parse the user agent string and deny access based on the type of browser that has been used."
									},
									"response": []
								},
								{
									"name": "Change User Policy based on Browser type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"const functionString = `",
													"const parser = require('ua-parser-js');",
													"",
													"exports.handler = async (context) => {",
													"    const { browser } = parser(context.device.user_agent);",
													"    ",
													"    let user = context.user;",
													"",
													"    // If the user has one of these browsers then change the User Policy",
													"    // If they have a different browser then they will continue with their assigned User Policy",
													"    switch (browser.name) {",
													"        // case \"Edge\": ",
													"        //     user.policy_id = 123456;",
													"        //     break;",
													"        // case \"Chrome\":",
													"        //     user.policy_id = 123133;",
													"        //     break;        ",
													"        // case \"Firefox\":",
													"        //     user.policy_id = 123123;",
													"        //     break;        ",
													"        // case \"Safari\":",
													"        //     user.policy_id = 627214;",
													"        //     break;        ",
													"    }",
													"",
													"    console.log(\"User\", user);",
													"",
													"    return {",
													"        success: true,",
													"        user: user",
													"    }",
													"}",
													"`;",
													"",
													"const b64function = Buffer.from(functionString).toString('base64');",
													"postman.setEnvironmentVariable(\"base64Function\", b64function);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"pre-authentication\",\n\t\"function\": \"{{base64Function}}\",\n\t\"disabled\": false,\n    \"runtime\": \"nodejs12.x\",\n\t\"retries\": 0,\n\t\"timeout\": 1,\n    \"options\":{\n\t    \"risk_enabled\": false,\n    \t\"location_enabled\": false,\n        \"mfa_device_info_enabled\": false\n    },  \n\t\"env_vars\": [\n\t],\n\t\"packages\": {\n\t\t\"ua-parser-js\": \"0.7.21\"\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks/:hook_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks",
												":hook_id"
											],
											"variable": [
												{
													"key": "hook_id",
													"value": "{{pre_authentication_hook_id}}"
												}
											]
										},
										"description": "This hook uses an NPM package to parse the user agent string and deny access based on the type of browser that has been used.\n\n* If the user has one of the defined browsers then change the User Policy. \n* If they have a browser that is not included in the list then they will continue with their assigned User Policy"
									},
									"response": []
								},
								{
									"name": "Change User Policy for Mobile Devices",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"const functionString = `",
													"exports.handler = async (context) => {",
													"    console.log(context);",
													"",
													"    const MOBILE_POLICY_ID = 90002;",
													"",
													"    let user = context.user;",
													"    console.log(\"Users Assigned Policy ID is \" + user.policy_id);",
													"",
													"    if (context.device.is_mobile) {",
													"        user.policy_id = MOBILE_POLICY_ID;",
													"        console.log(\"Mobile device detected. Changing policy id to \" + user.policy_id);        ",
													"    } ",
													"",
													"    return {",
													"        success: true,",
													"        user: user",
													"    }",
													"}",
													"`;",
													"",
													"const b64function = Buffer.from(functionString).toString('base64');",
													"postman.setEnvironmentVariable(\"base64Function\", b64function);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"pre-authentication\",\n\t\"function\": \"{{base64Function}}\",\n\t\"disabled\": false,\n    \"runtime\": \"nodejs12.x\",\n\t\"retries\": 0,\n\t\"timeout\": 1,\n    \"options\":{\n\t    \"risk_enabled\": false,\n    \t\"location_enabled\": false,\n        \"mfa_device_info_enabled\": false\n    },  \n\t\"env_vars\": [\n\t],\n\t\"packages\": {\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks/:hook_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks",
												":hook_id"
											],
											"variable": [
												{
													"key": "hook_id",
													"value": "{{pre_authentication_hook_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Post to Slack on High Risk",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"const functionString = `",
													"",
													"const axios = require(\"axios\")",
													"const RISK_THRESHOLD = 50;",
													"",
													"exports.handler = async context => {",
													"  try {",
													"      if (context.risk.score > RISK_THRESHOLD) {",
													"          const payload = JSON.stringify({",
													"              channel: \"#integrations\", ",
													"              username: \"onelogin_hooks_bot\", ",
													"              text: \"Eeek! High risk login (score: \" + context.risk.score + \")  detected for \" + context.user.user_identifier,     ",
													"              icon_emoji: \":scream:\"",
													"          });",
													"",
													"          const options = {",
													"              headers: {",
													"                  \"Content-Type\": \"application/x-www-form-urlencoded\" ",
													"              }",
													"          }",
													"",
													"          const response = await axios.post(process.env.SLACK_WEBHOOK_URL, payload, options);",
													"          console.log(\"Response Status: \" + response.statusText);",
													"          console.log(response.data);",
													"      }",
													"  }",
													"  catch (error) {",
													"      console.log(error.toJSON());",
													"  }",
													"",
													"  return {",
													"      success: true,",
													"      user: context.user",
													"  }",
													"};",
													"`;",
													"",
													"const b64function = Buffer.from(functionString).toString('base64');",
													"postman.setEnvironmentVariable(\"base64Function\", b64function);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"pre-authentication\",\n\t\"function\": \"{{base64Function}}\",\n\t\"disabled\": false,\n    \"runtime\": \"nodejs12.x\",\n    \"context_version\": \"1.1.0\",\n\t\"retries\": 0,\n\t\"timeout\": 1,\n    \"options\":{\n\t    \"risk_enabled\": true\n    },  \n\t\"env_vars\": [\n        \"SLACK_WEBHOOK_URL\"\n\t],\n\t\"packages\": {\n        \"axios\": \"0.21.1\"        \n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks/:hook_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks",
												":hook_id"
											],
											"variable": [
												{
													"key": "hook_id",
													"value": "{{pre_authentication_hook_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Switch to Cisco AnyConnect policy based on User Agent",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const functionString = `",
													"    const parser = require(\"ua-parser-js\");",
													"",
													"    const ANYCONNECT_POLICY_ID = 1234;",
													"",
													"    const anyconnectBrowser = [",
													"        [/(AnyConnect)\\\\/(\\\\d+)(?:\\\\.(\\\\d+)|)(?:\\\\.(\\\\d+)|)/i],",
													"        [parser.BROWSER.NAME, parser.BROWSER.VERSION]",
													"    ];",
													"",
													"    const uaExtensions = { browser: anyconnectBrowser };",
													"",
													"    exports.handler = async context => {",
													"        const ua = parser(context.device.user_agent, uaExtensions);",
													"",
													"        // Overrides the policy ID if the browser type is AnyConnect,",
													"        // otherwise, use the default policy_id already assigned to the user",
													"        const policy_id = ua.browser.name === 'AnyConnect'",
													"            ? ANYCONNECT_POLICY_ID",
													"            : context.user.policy_id;",
													"",
													"        return {",
													"            success: true,",
													"            user: { policy_id }",
													"        };",
													"    };",
													"`;",
													"",
													"const b64function = Buffer.from(functionString).toString('base64');",
													"postman.setEnvironmentVariable(\"base64Function\", b64function);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"pre-authentication\",\n\t\"function\": \"{{base64Function}}\",\n\t\"disabled\": false,\n    \"runtime\": \"nodejs12.x\",\n\t\"retries\": 0,\n\t\"timeout\": 1,\n    \"options\":{\n\t    \"risk_enabled\": false,\n    \t\"location_enabled\": true,\n        \"mfa_device_info_enabled\": false\n    },  \n\t\"env_vars\": [\n\t],\n\t\"packages\": {\n        \"ua-parser-js\": \"0.7.23\"        \n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks/:hook_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks",
												":hook_id"
											],
											"variable": [
												{
													"key": "hook_id",
													"value": "{{pre_authentication_hook_id}}"
												}
											]
										},
										"description": "This pre-authentication hook will look for a specific useragent string that is used by the Cisco Anypoint Connect VPN client and then force the user to switch to the defined user policy. \n\nSimply change the ANYCONNECT_POLICY_ID value to the ID of the user policy that you want to use. "
									},
									"response": []
								},
								{
									"name": "Change User Policy by IP Range",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const functionString = `",
													"    const ipRangeCheck = require(\"ip-range-check\");",
													"",
													"    // List of IPv4 or IPv6 CIDR ranges",
													"    const IP_RANGES = [\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\", \"2001:4860:4860::8888/32\", \"1.1.1.1\", \"192.168.1.2/24\"]",
													"",
													"    // The policy id to assign if the users ip falls into the IP_RANGES",
													"    const TARGET_POLICY_ID = 8888;",
													"",
													"    exports.handler = async context => {",
													"",
													"    // Defaults to the policy id currently assigned to the user",
													"    let policy_id_to_assign = context.user.policy_id;",
													"",
													"    try {",
													"        if (ipRangeCheck(context.location.ip, IP_RANGES)){",
													"            policy_id_to_assign = TARGET_POLICY_ID;",
													"        }",
													"    }",
													"    catch (e) {",
													"        console.log(\"Error checking ip range \", e);",
													"    }",
													"",
													"    return {",
													"        success: true,",
													"        user: { ",
													"            policy_id: policy_id_to_assign ",
													"        }",
													"    };",
													"    };",
													"`;",
													"",
													"const b64function = Buffer.from(functionString).toString('base64');",
													"postman.setEnvironmentVariable(\"base64Function\", b64function);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"pre-authentication\",\n\t\"function\": \"{{base64Function}}\",\n\t\"disabled\": false,\n    \"runtime\": \"nodejs12.x\",\n\t\"retries\": 0,\n\t\"timeout\": 1,\n    \"options\":{\n\t    \"risk_enabled\": false,\n    \t\"location_enabled\": true,\n        \"mfa_device_info_enabled\": false\n    },  \n\t\"env_vars\": [\n\t],\n\t\"packages\": {\n        \"ip-range-check\": \"0.2.0\"     \n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks/:hook_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks",
												":hook_id"
											],
											"variable": [
												{
													"key": "hook_id",
													"value": "{{pre_authentication_hook_id}}"
												}
											]
										},
										"description": "Use this pre-authentication hook to change a user policy based on the users IP address being included in an IPv4 or IPv6 CIDR range. "
									},
									"response": []
								},
								{
									"name": "Require MFA every X number of days",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const functionString = `",
													"const moment = require(\"moment\");",
													"",
													"// The policy ID to use for requiring an MFA device.",
													"const MFA_POLICY_ID = 54321;",
													"",
													"// The maximum number of days that may be allowed before MFA needs to be reprompted",
													"const DAYS_THRESHOLD = 30;",
													"",
													"const response = (policy_id) => {",
													"  return {",
													"    success: true,",
													"    user: { policy_id }",
													"  };",
													"};",
													"",
													"exports.handler = async (context) => {",
													"  if (context.mfa_devices.length === 0) {",
													"    return response(context.user.policy_id);",
													"  }  ",
													"",
													"  let mfaDevicesByUsageOrder = context.mfa_devices.sort(function(a,b){",
													"    return new Date(b.last_used_at) - new Date(a.last_used_at);",
													"  });  ",
													"",
													"  let days = moment.utc().diff(mfaDevicesByUsageOrder[0].last_used_at, 'days');",
													"",
													"  // Evaluate the number of days against the threshold",
													"  if (days > DAYS_THRESHOLD) {",
													"    return response(MFA_POLICY_ID);",
													"  } else {",
													"    return response(context.user.policy_id);",
													"  }",
													"};",
													"`;",
													"",
													"const b64function = Buffer.from(functionString).toString('base64');",
													"postman.setEnvironmentVariable(\"base64Function\", b64function);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"pre-authentication\",\n\t\"function\": \"{{base64Function}}\",\n\t\"disabled\": false,\n    \"runtime\": \"nodejs12.x\",\n\t\"retries\": 0,\n\t\"timeout\": 1,\n    \"context_version\": \"1.1.0\",\n    \"options\":{\n\t    \"risk_enabled\": false,\n    \t\"location_enabled\": false,\n        \"mfa_device_info_enabled\": true\n    },  \n\t\"env_vars\": [\n\t],\n\t\"packages\": {\n        \"moment\": \"2.29.1\"\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks/:hook_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks",
												":hook_id"
											],
											"variable": [
												{
													"key": "hook_id",
													"value": "{{pre_authentication_hook_id}}"
												}
											]
										},
										"description": "Use this hook to require users to perform MFA every X number of days."
									},
									"response": []
								},
								{
									"name": "Reset Password after X without logging in",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const functionString = `",
													"    // The policy id to assign if the users has not logged in for X days",
													"    const TARGET_POLICY_ID = 88888;",
													"",
													"    // User will be forced to change password after this many days",
													"    const NUMBER_OF_DAYS_SINCE_LAST_LOGIN = 30",
													"",
													"    exports.handler = async context => {",
													"        let policy_id_to_assign = context.user.policy_id; // Defaults to users assigned policy ",
													"",
													"        if(context.user.last_login_success){",
													"            let today = new Date();",
													"            let change_policy_date = new Date().setDate(today.getDate() - NUMBER_OF_DAYS_SINCE_LAST_LOGIN);",
													"            let last_login_date = new Date(context.user.last_login_success);",
													"        ",
													"            if(last_login_date < change_policy_date) {",
													"                policy_id_to_assign = TARGET_POLICY_ID;",
													"            }",
													"        }",
													"",
													"        return {",
													"            success: true,",
													"            user: { ",
													"                policy_id: policy_id_to_assign ",
													"            }",
													"        };",
													"    };",
													"`;",
													"",
													"const b64function = Buffer.from(functionString).toString('base64');",
													"postman.setEnvironmentVariable(\"base64Function\", b64function);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"pre-authentication\",\n    \"context_version\": \"1.1.0\",\n    \"disabled\": false,\n    \"runtime\": \"nodejs12.x\",\n    \"retries\": 0,\n    \"timeout\": 1,\n    \"options\":{\n\t    \"risk_enabled\": false,\n    \t\"location_enabled\": false,\n        \"mfa_device_info_enabled\": false\n    },  \n    \"function\": \"{{base64Function}}\",\n    \"env_vars\": [],\n    \"packages\": {\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks/:hook_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks",
												":hook_id"
											],
											"variable": [
												{
													"key": "hook_id",
													"value": "{{pre_authentication_hook_id}}"
												}
											]
										},
										"description": "This hook example requires that a User Policy has been configured with a Maximum Password Age of 1 day. This will be consider as the Password Reset policy. \n\nIf they user has not logged in for X number of days then the user will be switched to the Password Reset policy and prompted to change their password."
									},
									"response": []
								},
								{
									"name": "Change User Policy based on High Risk",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"const functionString = `",
													"exports.handler = async (context) => {",
													"    console.log(context);",
													"",
													"    const POLICY_ID = 90002;",
													"    const RISK_THRESHOLD = 90;",
													"",
													"    let user = context.user;",
													"    console.log(\"Users Assigned Policy ID is \" + user.policy_id);",
													"",
													"    if (context.risk.score > RISK_THRESHOLD) {",
													"        user.policy_id = POLICY_ID;",
													"        console.log(\"High risk detected. Changing policy id to \" + user.policy_id);        ",
													"    } ",
													"",
													"    return {",
													"        success: true,",
													"        user: user",
													"    }",
													"}",
													"`;",
													"",
													"const b64function = Buffer.from(functionString).toString('base64');",
													"postman.setEnvironmentVariable(\"base64Function\", b64function);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"pre-authentication\",\n\t\"function\": \"{{base64Function}}\",\n\t\"disabled\": false,\n    \"runtime\": \"nodejs12.x\",\n\t\"retries\": 0,\n\t\"timeout\": 1,\n    \"options\":{\n\t    \"risk_enabled\": true,\n    \t\"location_enabled\": false,\n        \"mfa_device_info_enabled\": false\n    },  \n\t\"env_vars\": [\n\t],\n\t\"packages\": {\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks/:hook_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks",
												":hook_id"
											],
											"variable": [
												{
													"key": "hook_id",
													"value": "{{pre_authentication_hook_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Change User Policy based on MFA Enrollment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const functionString = `",
													"// If the user has this MFA factor registered then we will change to a policy ",
													"// that forces them to use it. ",
													"const MFA_DEVICE_USER_DISPLAY_NAME = 'OneLogin SMS';",
													"",
													"// The policy ID that forces them to use the factor named above.",
													"const MFA_POLICY_ID = 54321;",
													"",
													"const response = function (success, policy_id){",
													"  return {",
													"    success: success,",
													"    user: { ",
													"      policy_id ",
													"    }",
													"  }",
													"};",
													"",
													"exports.handler = async context => {",
													"  try {",
													"    if (context.mfa_devices.length === 0) {",
													"      return response(true, context.user.policy_id);",
													"    }",
													"  ",
													"    const device = context.mfa_devices.find( ({ user_display_name }) => user_display_name === MFA_DEVICE_USER_DISPLAY_NAME );",
													"",
													"    if(device){",
													"      return response(true, MFA_POLICY_ID);",
													"    }",
													"  ",
													"    return response(true, context.user.policy_id);",
													"",
													"  } catch (error) {",
													"    console.log(error);",
													"    return response(false, context.user.policy_id);",
													"  }",
													"};   ",
													"`;",
													"",
													"const b64function = Buffer.from(functionString).toString('base64');",
													"postman.setEnvironmentVariable(\"base64Function\", b64function);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"context_version\": \"1.1.0\",\n\t\"type\": \"pre-authentication\",\n\t\"function\": \"{{base64Function}}\",\n\t\"disabled\": false,\n    \"runtime\": \"nodejs12.x\",\n\t\"retries\": 0,\n\t\"timeout\": 1,\n    \"options\":{\n\t    \"risk_enabled\": false,\n    \t\"location_enabled\": false,\n        \"mfa_device_info_enabled\": true\n    },  \n\t\"env_vars\": [\n\t],\n\t\"packages\": {\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks/:hook_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks",
												":hook_id"
											],
											"variable": [
												{
													"key": "hook_id",
													"value": "{{pre_authentication_hook_id}}"
												}
											]
										},
										"description": "Use this hook example to change the user policy based on a specific MFA device being registered. "
									},
									"response": []
								},
								{
									"name": "Change Policy for New Users",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"const functionString = `",
													"",
													"const NEW_USER_POLICY_ID = 12345;",
													"",
													"exports.handler = async (context) => {",
													"    console.log(context);",
													"",
													"    let policy_id = context.user.policy_id;",
													"",
													"    if (!context.user.last_login_success) {",
													"        policy_id = NEW_USER_POLICY_ID",
													"    }",
													"",
													"    return {",
													"        success: true,",
													"        user: {",
													"            policy_id: policy_id",
													"        }  ",
													"    };",
													"}",
													"`;",
													"",
													"const b64function = Buffer.from(functionString).toString('base64');",
													"postman.setEnvironmentVariable(\"base64Function\", b64function);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"pre-authentication\",\n\t\"function\": \"{{base64Function}}\",\n\t\"disabled\": false,\n    \"runtime\": \"nodejs12.x\",\n    \"context_version\": \"1.1.0\",\n\t\"retries\": 0,\n\t\"timeout\": 1, \n\t\"env_vars\": [\n\t],\n\t\"packages\": {\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks/:hook_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks",
												":hook_id"
											],
											"variable": [
												{
													"key": "hook_id",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Switch policy to allow MFA Enrollment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const functionString = `",
													"// If they dont have any MFA devices registered then switch them to this policy",
													"const MFA_POLICY_ID = 54321;",
													"",
													"const response = function (success, policy_id){",
													"  return {",
													"    success: success,",
													"    user: { ",
													"      policy_id ",
													"    }",
													"  }",
													"};",
													"",
													"exports.handler = async context => {",
													"  try {",
													"    if (context.mfa_devices.length === 0) {",
													"      return response(true, MFA_POLICY_ID);",
													"    }",
													"  ",
													"    return response(true, context.user.policy_id);",
													"",
													"  } catch (error) {",
													"    console.log(error);",
													"    return response(false, context.user.policy_id);",
													"  }",
													"};   ",
													"`;",
													"",
													"const b64function = Buffer.from(functionString).toString('base64');",
													"postman.setEnvironmentVariable(\"base64Function\", b64function);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"context_version\": \"1.1.0\",\n\t\"type\": \"pre-authentication\",\n\t\"function\": \"{{base64Function}}\",\n\t\"disabled\": false,\n    \"runtime\": \"nodejs12.x\",\n\t\"retries\": 0,\n\t\"timeout\": 1,\n    \"options\":{\n\t    \"risk_enabled\": false,\n    \t\"location_enabled\": false,\n        \"mfa_device_info_enabled\": true\n    },  \n\t\"env_vars\": [\n\t],\n\t\"packages\": {\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks/:hook_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks",
												":hook_id"
											],
											"variable": [
												{
													"key": "hook_id",
													"value": "{{pre_authentication_hook_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Pre-Auth Hook",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks/:hook_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks",
												":hook_id"
											],
											"variable": [
												{
													"key": "hook_id",
													"value": "{{pre_authentication_hook_id}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "The `pre-authentication` hook runs synchronously as part of a UI based login flow. The hook fires immediately after the user enters a username/email but before they enter their password or are prompted for multi-factor authentication.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "User-Migration Hook",
							"item": [
								{
									"name": "Migrate user via external API",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const functionString = `",
													"const axios = require(\"axios\");",
													"",
													"const AUTHENTICATION_API_ENDPOINT = \"https://example.com/auth\";",
													"const AUTHENTICATION_API_BEARER_TOKEN = \"your-access-token-here\";",
													"",
													"exports.handler = async (context) => {",
													"    // Its not considered good practice to log the user context on ",
													"    // this hook as it contains a password. Only enable this for debugging",
													"    // console.log(context);",
													"",
													"    let user;",
													"",
													"    try {",
													"        const response = await axios.post(AUTHENTICATION_API_ENDPOINT, {",
													"            username: context.user_identifier,",
													"            password: context.password",
													"        }, {",
													"            headers: { ",
													"                \"Authorization\": \"Bearer \" + AUTHENTICATION_API_BEARER_TOKEN",
													"            }",
													"        });",
													"        console.log(response.data);",
													"",
													"        if (response.data) {",
													"            // Success - Create the user",
													"            return {",
													"                success: true,",
													"                user: {",
													"                    username: context.user_identifier,",
													"                    password: context.password,",
													"                    firstname: response.data.firstname,",
													"                    lastname: response.data.lastname,",
													"                    email: response.data.email",
													"                }",
													"            };            ",
													"        } ",
													"    }",
													"    catch (error) {",
													"        console.log(\"Error authenticating user \", error);         ",
													"    }  ",
													"",
													"    // Fail closed. Dont create the user. Deny access",
													"    return {",
													"        success: false,",
													"        user: {}",
													"    }     ",
													"}",
													"`;",
													"",
													"const b64function = Buffer.from(functionString).toString('base64');",
													"postman.setEnvironmentVariable(\"base64Function\", b64function);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"user-migration\",\n\t\"function\": \"{{base64Function}}\",\n\t\"disabled\": false,\n    \"context_version\": \"1.0.0\",\n\t\"retries\": 0,\n    \"runtime\": \"nodejs12.x\",\n\t\"timeout\": 10,\n\t\"env_vars\": [\n\t],\n\t\"packages\": {\n        \"axios\": \"0.21.1\"\n\t}   \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks"
											]
										},
										"description": "This User-Migration Smart Hook example shows how you can connect to an external API to verify a usernames/password and extract information about the user. \n\nThis example can be easily adjusted to work with most user validation APIs."
									},
									"response": []
								},
								{
									"name": "Migrate user from Auth0",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const functionString = `",
													"const axios = require(\"axios\");",
													"const jwt = require('jsonwebtoken');",
													"const jwksClient = require('jwks-rsa');",
													"",
													"function getKey(header, callback){",
													"  var client = jwksClient({",
													"    jwksUri: \"https://\" + process.env.AUTH0_SUBDOMAIN + \".auth0.com/.well-known/jwks.json\"",
													"  });",
													"",
													"  client.getSigningKey(header.kid, function(err, key) {",
													"    var signingKey = key.publicKey || key.rsaPublicKey;",
													"    callback(null, signingKey);",
													"  });",
													"}",
													"",
													"async function verifyJWT(token) {",
													"  return new Promise(",
													"    (resolve, reject) => {",
													"      jwt.verify(token, getKey, {}, function(err, decoded) {",
													"        resolve(decoded)",
													"      });      ",
													"    }",
													"  );",
													"}",
													"",
													"exports.handler = async (context) => {",
													"    // Its not considered good practice to log the user context on ",
													"    // this hook as it contains a password. Only enable this for debugging",
													"    // console.log(context);",
													"",
													"    let user;",
													"",
													"    try {",
													"      // Do a password grant request to validate the password",
													"      const response = await axios.post(\"https://\" + process.env.AUTH0_SUBDOMAIN + \".auth0.com/oauth/token\", {",
													"          grant_type: \"password\",",
													"          username: context.user_identifier,",
													"          password: context.password,",
													"          scope: \"openid\",",
													"          client_id: process.env.AUTH0_CLIENT_ID,",
													"          client_secret: process.env.AUTH0_CLIENT_SECRET",
													"      }, {",
													"          headers: { ",
													"              \"Content-Type\": \"application/json\"",
													"          }",
													"      });",
													"      // console.log(response);",
													"",
													"      if (response.data) {",
													"        let decodedToken = await verifyJWT(response.data.id_token);",
													"        console.log(decodedToken);",
													"",
													"        let name = decodedToken.name.split(\" \");",
													"",
													"        return {",
													"          success: true,",
													"          user: {",
													"            username: context.user_identifier,",
													"            password: context.password,",
													"            firstname: name.shift(),",
													"            lastname: name.join(\" \"),",
													"            email: decodedToken.email",
													"          }",
													"        };          ",
													"      }",
													"    }",
													"    catch (error) {",
													"        console.log(\"Error authenticating user \", error);         ",
													"    }  ",
													"    ",
													"    // Fail closed. Dont create the user. Deny access",
													"    return {",
													"        success: false,",
													"        user: {}",
													"    }       ",
													"}",
													"`;",
													"",
													"const b64function = Buffer.from(functionString).toString('base64');",
													"postman.setEnvironmentVariable(\"base64Function\", b64function);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"user-migration\",\n\t\"function\": \"{{base64Function}}\",\n\t\"disabled\": false,\n    \"context_version\": \"1.0.0\",\n\t\"retries\": 0,\n    \"runtime\": \"nodejs12.x\",\n\t\"timeout\": 10,\n\t\"env_vars\": [\n        \"AUTH0_SUBDOMAIN\",\n        \"AUTH0_CLIENT_ID\",\n        \"AUTH0_CLIENT_SECRET\"\n\t],\n\t\"packages\": {\n        \"axios\": \"0.21.1\",\n        \"jwks-rsa\": \"2.0.1\",\n        \"jsonwebtoken\": \"8.5.1\"\n\t}   \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks"
											]
										},
										"description": "This user-migration hook lets you import users into OneLogin from an Auth0 account. \n\nIf the user is not found in OneLogin then this hook is triggered which will make a call out to Auth0 to validate the users password. \n\nIf the password is valid then user details are returned, the user is created in OneLogin and the authentication is completed."
									},
									"response": []
								},
								{
									"name": "Migrate user from AWS Cognito",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const functionString = `",
													"const axios = require(\"axios\");",
													"const jwt = require('jsonwebtoken');",
													"const jwksClient = require('jwks-rsa');",
													"",
													"",
													"function getKey(header, callback){",
													"  var client = jwksClient({",
													"    jwksUri: \"https://cognito-idp.\" + process.env.AWSREGION + \".amazonaws.com/\" + process.env.AWS_USERPOOLID + \"/.well-known/jwks.json\"",
													"  });",
													"",
													"  client.getSigningKey(header.kid, function(err, key) {",
													"    var signingKey = key.publicKey || key.rsaPublicKey;",
													"    callback(null, signingKey);",
													"  });",
													"}",
													"",
													"async function verifyJWT(token) {",
													"  return new Promise(",
													"    (resolve, reject) => {",
													"      jwt.verify(token, getKey, {}, function(err, decoded) {",
													"        resolve(decoded)",
													"      });      ",
													"    }",
													"  );",
													"}",
													"",
													"exports.handler = async (context) => {",
													"    // Its not considered good practice to log the user context on ",
													"    // this hook as it contains a password. Only enable this for debugging",
													"    // console.log(context);",
													"",
													"    let user;",
													"    try {",
													"      // Do a password grant request to validate the password",
													"      const response = await axios.post(\"https://cognito-idp.\" + process.env.AWSREGION + \".amazonaws.com/\" , {",
													"        AuthFlow: 'USER_PASSWORD_AUTH',",
													"        ClientId: process.env.AWS_CLIENT_ID,",
													"        AuthParameters: {",
													"            USERNAME: context.user_identifier,",
													"            PASSWORD: context.password",
													"        }",
													"      }, {",
													"          headers: { ",
													"              \"Content-Type\": \"application/x-amz-json-1.1\",",
													"              \"X-Amz-Target\": \"AWSCognitoIdentityProviderService.InitiateAuth\"",
													"          }",
													"      });",
													"      console.log(response);",
													"    if (response.data.AuthenticationResult) {",
													"        let decodedToken = await verifyJWT(response.data.AuthenticationResult.IdToken);",
													"        console.log(decodedToken);",
													"",
													"        return {",
													"          success: true,",
													"          user: {",
													"            username: context.user_identifier,",
													"            password: context.password,",
													"            firstname: decodedToken.given_name,",
													"            lastname: decodedToken.family_name,",
													"            email: decodedToken.email",
													"          }",
													"        };          ",
													"      }",
													"    }",
													"    catch (error) {",
													"        console.log(\"Error authenticating user \", error);         ",
													"    }  ",
													"    ",
													"    // Fail closed. Dont create the user. Deny access",
													"    return {",
													"        success: false,",
													"        user: {}",
													"    }       ",
													"}",
													"`;",
													"",
													"const b64function = Buffer.from(functionString).toString('base64');",
													"postman.setEnvironmentVariable(\"base64Function\", b64function);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"user-migration\",\n\t\"function\": \"{{base64Function}}\",\n\t\"disabled\": false,\n    \"context_version\": \"1.0.0\",\n\t\"retries\": 0,\n    \"runtime\": \"nodejs12.x\",\n\t\"timeout\": 10,\n\t\"env_vars\": [\n        \"AWS_USERPOOLID\",\n        \"AWS_CLIENT_ID\",\n        \"AWSREGION\"\n\t],\n\t\"packages\": {\n        \"axios\": \"0.21.1\",\n        \"jwks-rsa\": \"2.0.1\",\n        \"jsonwebtoken\": \"8.5.1\"\n\t}   \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks"
											]
										},
										"description": "This user-migration hook lets you import users into OneLogin from an AWS Cognito user pool. \n\nIf the user is not found in OneLogin then this hook is triggered which will make a call out to the Cognito API to validate the users password. \n\nIf the password is valid then user details are returned, the user is created in OneLogin and the authentication is completed. "
									},
									"response": []
								},
								{
									"name": "Migrate user from Okta",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const functionString = `",
													"const axios = require(\"axios\");",
													"",
													"",
													"exports.handler = async (context) => {",
													"    // Its not considered good practice to log the user context on ",
													"    // this hook as it contains a password. Only enable this for debugging",
													"    // console.log(context);",
													"",
													"    let user;",
													"",
													"    try {",
													"      // Do a password grant request to validate the password",
													"      const response = await axios.post(\"https://\" + process.env.OKTA_SUBDOMAIN + \".okta.com/api/v1/authn\", {",
													"          username: context.user_identifier,",
													"          password: context.password,",
													"          options: {",
													"              multiOptionalFactorEnroll: false,",
													"              warnBeforePasswordExpired: false",
													"          } ",
													"      }, {",
													"          headers: { ",
													"              \"Content-Type\": \"application/json\",",
													"              \"Accept\": \"application/json\"",
													"          }",
													"      });",
													"      console.log(response);",
													"",
													"      if (response.data) {",
													"",
													"        return {",
													"          success: true,",
													"          user: {",
													"            username: context.user_identifier,",
													"            password: context.password,",
													"            firstname: response.data._embedded.user.profile.firstName,",
													"            lastname: response.data._embedded.user.profile.lastName,",
													"            email: response.data._embedded.user.profile.login",
													"          }",
													"        };          ",
													"      }",
													"    }",
													"    catch (error) {",
													"        console.log(\"Error authenticating user \", error);         ",
													"    }  ",
													"    ",
													"    // Fail closed. Dont create the user. Deny access",
													"    return {",
													"        success: false,",
													"        user: {}",
													"    }       ",
													"}",
													"`;",
													"",
													"const b64function = Buffer.from(functionString).toString('base64');",
													"postman.setEnvironmentVariable(\"base64Function\", b64function);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"user-migration\",\n\t\"function\": \"{{base64Function}}\",\n\t\"disabled\": false,\n    \"context_version\": \"1.0.0\",\n\t\"retries\": 0,\n    \"runtime\": \"nodejs12.x\",\n\t\"timeout\": 10,\n\t\"env_vars\": [\n        \"OKTA_SUBDOMAIN\"\n\t],\n\t\"packages\": {\n        \"axios\": \"0.21.1\",\n        \"jwks-rsa\": \"2.0.1\",\n        \"jsonwebtoken\": \"8.5.1\"\n\t}   \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks"
											]
										},
										"description": "This user-migration hook lets you import users into OneLogin from an Okta account. \n\nIf the user is not found in OneLogin then this hook is triggered which will make a call out to Okta to validate the users password. \n\nIf the password is valid then user details are returned, the user is created in OneLogin and the authentication is completed. "
									},
									"response": []
								}
							]
						},
						{
							"name": "Environment Variables",
							"item": [
								{
									"name": "List Variables",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks/envs",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks",
												"envs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Variable",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"if (pm.response.json().id) {",
													"    postman.setEnvironmentVariable(\"hook_envvar_id\", pm.response.json().id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"MY_API_KEY\",\n\t\"value\": \"foobarbaz\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks/envs",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks",
												"envs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Variable",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"value\": \"super-secret-updated\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks/envs/:hook_env_var_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks",
												"envs",
												":hook_env_var_id"
											],
											"variable": [
												{
													"key": "hook_env_var_id",
													"value": "{{hook_env_var_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Variable",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{api-domain}}/api/2/hooks/envs/:hook_env_var_id",
											"protocol": "https",
											"host": [
												"{{api-domain}}"
											],
											"path": [
												"api",
												"2",
												"hooks",
												"envs",
												":hook_env_var_id"
											],
											"variable": [
												{
													"key": "hook_env_var_id",
													"value": "{{hook_env_var_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "List Hooks",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/hooks",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"hooks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Hook",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Response visualizer for showing hook content",
											"const response = {",
											"    ...pm.response.json(),",
											"    function: Buffer(pm.response.json().function, 'base64').toString()",
											"};",
											"pm.visualizer.set(",
											"    '<p>Function Content<p><pre><code class=\"javascript\">{{response.function}}</code></pre>',",
											"    { response }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/hooks/{{hook_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"hooks",
										"{{hook_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Hook Logs",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/hooks/{{hook_id}}/logs",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"hooks",
										"{{hook_id}}",
										"logs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Hook",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"const functionString = `",
											"exports.handler = async (context) => {",
											"    return {",
											"        user: context.user",
											"    }",
											"}",
											"`;",
											"",
											"const b64function = Buffer.from(functionString).toString('base64');",
											"postman.setEnvironmentVariable(\"base64Function\", b64function);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// For Convenience",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"hook_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"type\": \"pre-authentication\",\n\t\"function\": \"{{base64Function}}\",\n\t\"disabled\": false,\n    \"runtime\": \"nodejs12.x\",\n\t\"retries\": 0,\n\t\"timeout\": 1,\n    \"options\":{\n\t    \"risk_enabled\": false,\n    \t\"location_enabled\": false,\n        \"mfa_device_info_enabled\": false\n    },  \n\t\"env_vars\": [\n\t],\n\t\"packages\": {\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/hooks",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"hooks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Hook",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"const functionString = `",
											"exports.handler = async (context) => {",
											"    return {",
											"        user: context.user",
											"    }",
											"}",
											"`;",
											"",
											"const b64function = Buffer.from(functionString).toString('base64');",
											"postman.setEnvironmentVariable(\"base64Function\", b64function);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"type\": \"pre-authentication\",\n\t\"function\": \"{{base64Function}}\",\n\t\"disabled\": false,\n    \"runtime\": \"nodejs12.x\",\n\t\"retries\": 0,\n\t\"timeout\": 1,\n    \"options\":{\n\t    \"risk_enabled\": false,\n    \t\"location_enabled\": false,\n        \"mfa_device_info_enabled\": false\n    },  \n\t\"env_vars\": [\n\t],\n\t\"packages\": {\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/hooks/{{hook_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"hooks",
										"{{hook_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Hook",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/hooks/{{hook_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"hooks",
										"{{hook_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Smart MFA",
			"item": [
				{
					"name": "V2",
					"item": [
						{
							"name": "Validate / Register User via SMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Returns MFA\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.mfa.otp_sent).to.eql(true);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"state_token\", jsonData.mfa.state_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_identifier\": \"mike.tester\",\n  \"phone\": \"15551231234\",\n  \"context\": {\n    \"ip\": \"120.118.218.225\",\n    \"user_agent\": \"Mozilla/5.0 (Windows; U; Windows NT 6.0) AppleWebKit/531.1.0 (KHTML, like Gecko) Chrome/21.0.843.0 Safari/531.1.0\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/smart-mfa/",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"smart-mfa",
										""
									]
								},
								"description": "This request uses minimum required information to validate a new or existing user. If the risk score is above the threshold a one time token will be sent to the users phone via SMS."
							},
							"response": []
						},
						{
							"name": "Validate / Register User via Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"state_token\", jsonData.mfa.state_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_identifier\": \"mike.tester\",\n  \"email\": \"mike.tester@onelogin.com\",\n  \"context\": {\n    \"ip\": \"120.118.218.228\",\n    \"user_agent\": \"Mozilla/5.0 (Windows; U; Windows NT 6.0) AppleWebKit/531.1.0 (KHTML, like Gecko) Chrome/21.0.843.0 Safari/531.1.0\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/smart-mfa/",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"smart-mfa",
										""
									]
								},
								"description": "This request uses minimum required information to validate a new or existing user. If the risk score is above the threshold a one time token will be sent to the users phone via Email."
							},
							"response": []
						},
						{
							"name": "Verify Token",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"state_token\": \"{{state_token}}\",\n\t\"otp_token\": \"7F2164\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/smart-mfa/verify",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"smart-mfa",
										"verify"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "V1",
					"item": [
						{
							"name": "Get Users",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/1/users",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users"
									],
									"query": [
										{
											"key": "username",
											"value": "{{username}}",
											"disabled": true
										},
										{
											"key": "role_id",
											"value": "{{role_id}}",
											"disabled": true
										},
										{
											"key": "samaccountname",
											"value": "{{samaccountname}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Users Created Within a Timeframe",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/1/users?since=2013-11-19T01:19:34.776Z&until=2014-12-19T02:02:38.817Z",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users"
									],
									"query": [
										{
											"key": "since",
											"value": "2013-11-19T01:19:34.776Z"
										},
										{
											"key": "until",
											"value": "2014-12-19T02:02:38.817Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/1/users/{{user_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Apps for a User",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/1/users/{{user_id}}/apps",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users",
										"{{user_id}}",
										"apps"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Roles for a User",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/1/users/{{user_id}}/roles",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users",
										"{{user_id}}",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Custom Attributes",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/1/users/custom_attributes",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users",
										"custom_attributes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a User",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstname\":\"Sample\",\n  \"lastname\":\"Sampleton\",\n  \"email\":\"<email>\",\n  \"username\":\"sampleuser\"\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/users",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Session Login Token",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username_or_email\": \"<username_or_email>\", \n    \"password\": \"<password>\", \n    \"subdomain\": \"<subdomain>\" \n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/login/auth",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"login",
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Factor",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"otp_token\": \"<otp_token>\",\n    \"device_id\": \"<device_id>\",\n    \"state_token\": \"<state_token>\"\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/login/verify_factor",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"login",
										"verify_factor"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Session",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"session_token\":\"<session_token>\"\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/session_via_api_token",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"session_via_api_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a User",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"lastname\":\"Updated-Name\"\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/users/{{user_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Roles for a User",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"role_id_array\":[ <role_id> , <role_id> ]\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/users/{{user_id}}/add_roles",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users",
										"{{user_id}}",
										"add_roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Roles for a User",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"role_id_array\":[ <role_id>, <role_id> ]\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/users/{{user_id}}/remove_roles",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users",
										"{{user_id}}",
										"remove_roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Password Using ID in Cleartext",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"password\":\"<password>\",\n\"password_confirmation\":\"<password_confirmation>\"\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/users/set_password_clear_text/{{user_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users",
										"set_password_clear_text",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Password Using ID and SHA-256 and Salt",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"<sha-256-hashed-password>\",\n    \"password_confirmation\": \"<sha-256-hashed-password-confirmation>\",\n    \"password_algorithm\": \"salt+sha256\",\n    \"password_salt\": \"<salt>\"\n  }"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/users/set_password_using_salt/{{user_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users",
										"set_password_using_salt",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Custom Attributes for User",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"custom_attributes\":{\r\n      \"<custom_attribute_shortname1>\":\"<value>\",\r\n      \"<custom_attribute_shortname2>\":\"<value>\"\r\n   }\r\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/users/{{user_id}}/set_custom_attributes",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users",
										"{{user_id}}",
										"set_custom_attributes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set User State",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"state\":1\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/users/{{user_id}}/set_state",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users",
										"{{user_id}}",
										"set_state"
									]
								}
							},
							"response": []
						},
						{
							"name": "Log User Out",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/users/{{user_id}}/logout",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users",
										"{{user_id}}",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Lock User Account",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \"locked_until\": <integer_in_minutes> }"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/users/{{user_id}}/lock_user",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users",
										"{{user_id}}",
										"lock_user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a User",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/users/{{user_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "V2",
					"item": [
						{
							"name": "List Users",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/users",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"users"
									],
									"query": [
										{
											"key": "firstname",
											"value": "",
											"disabled": true
										},
										{
											"key": "lastname",
											"value": "",
											"disabled": true
										},
										{
											"key": "email",
											"value": "",
											"disabled": true
										},
										{
											"key": "created_since",
											"value": "2018-01-01",
											"disabled": true
										},
										{
											"key": "created_until",
											"value": "2019-09-14",
											"disabled": true
										},
										{
											"key": "updated_since",
											"value": "2020-07-01T20:38:24Z",
											"disabled": true
										},
										{
											"key": "updated_until",
											"value": "2020-08-14T20:38:24Z",
											"disabled": true
										},
										{
											"key": "last_login_since",
											"value": "2020-05-01",
											"disabled": true
										},
										{
											"key": "last_login_until",
											"value": "2020-06-01T00:00:00Z",
											"disabled": true
										},
										{
											"key": "group_id",
											"value": "461331",
											"disabled": true
										},
										{
											"key": "state",
											"value": "3",
											"disabled": true
										},
										{
											"key": "status",
											"value": "3",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,firstname,lastname,profile_picture_url,last_login",
											"disabled": true
										},
										{
											"key": "username",
											"value": "",
											"disabled": true
										},
										{
											"key": "samaccountname",
											"value": "",
											"disabled": true
										},
										{
											"key": "directory_id",
											"value": "123",
											"disabled": true
										},
										{
											"key": "external_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "app_id",
											"value": "123",
											"disabled": true
										},
										{
											"key": "user_ids",
											"value": "123,456",
											"disabled": true
										},
										{
											"key": "custom_attributes.{{custom_attribute_short_name}}",
											"value": "something",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "+firstname",
											"disabled": true
										}
									]
								},
								"description": "Get a list of users"
							},
							"response": []
						},
						{
							"name": "Get User",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/users/{{user_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User Apps",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/users/{{user_id}}/apps",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"users",
										"{{user_id}}",
										"apps"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// For Convenience",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"user_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstname\": \"Example\",\n  \"lastname\": \"Examplar\",\n  \"username\": \"example.user\",\n  \"password\": \"userpass123\",\n  \"password_confirmation\": \"userpass123\"\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/users",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"users"
									],
									"query": [
										{
											"key": "mappings",
											"value": "sync",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"state\": 1\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/users/{{user_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"users",
										"{{user_id}}"
									],
									"query": [
										{
											"key": "mappings",
											"value": "sync",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/users/{{user_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "User Mappings",
			"item": [
				{
					"name": "V2",
					"item": [
						{
							"name": "List Mappings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/mappings",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"mappings"
									],
									"query": [
										{
											"key": "has_condition",
											"value": "has_role:{{role_id}}",
											"disabled": true
										},
										{
											"key": "has_condition_type",
											"value": "none",
											"disabled": true
										},
										{
											"key": "has_action",
											"value": "set_status:*",
											"disabled": true
										},
										{
											"key": "has_action_type",
											"value": "none",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Mapping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/mappings/{{mapping_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"mappings",
										"{{mapping_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Mapping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response ID is not null\", function () {",
											"    pm.response.json().id.not.equal(null);",
											"});",
											"",
											"postman.setEnvironmentVariable(\"mapping_id\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Suspend after 90 days inactive\",\n    \"match\": \"all\",\n    \"position\": null,\n    \"enabled\": true,\n    \"conditions\": [\n        {\n            \"source\": \"last_login\",\n            \"operator\": \">\",\n            \"value\": \"90\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"action\": \"set_status\",\n            \"value\": [\"2\"]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/mappings",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"mappings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Mapping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response ID is not null\", function () {",
											"    pm.response.json().id.not.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"My Updated Mapping\",\n    \"match\": \"all\",\n    \"enabled\": true,\n    \"position\": 1,\n    \"conditions\": [\n        {\n            \"source\": \"last_login\",\n            \"operator\": \">\",\n            \"value\": \"90\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"action\": \"set_status\",\n            \"value\": \"2\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/mappings/{{mapping_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"mappings",
										"{{mapping_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Mapping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/mappings/{{mapping_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"mappings",
										"{{mapping_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Conditions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/mappings/conditions",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"mappings",
										"conditions"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Conditions Operators",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/mappings/conditions/{{mapping_condition_value}}/operators",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"mappings",
										"conditions",
										"{{mapping_condition_value}}",
										"operators"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Conditions Values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/mappings/conditions/{{mapping_condition_value}}/values",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"mappings",
										"conditions",
										"{{mapping_condition_value}}",
										"values"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Actions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/mappings/actions",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"mappings",
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Actions Values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/mappings/actions/{{mapping_action_value}}/values",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"mappings",
										"actions",
										"{{mapping_action_value}}",
										"values"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bulk Sort",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[196671,196670,196672,196676,197758]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/mappings/sort",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"mappings",
										"sort"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Vigilance AI",
			"item": [
				{
					"name": "V2",
					"item": [
						{
							"name": "Track an Event",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ip\": \"125.238.248.246\",\n  \"user\": {\n    \"id\": \"US_112233\",\n    \"name\": \"Eve Smith\"\n  },\n  \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\",\n  \"verb\": \"log-in\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/risk/events",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"risk",
										"events"
									]
								},
								"description": "Track an Event"
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"ip\": \"125.238.248.246\",\n  \"user\": {\n    \"id\": \"US_112233\",\n    \"name\": \"Eve Smith\"\n  },\n  \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\",\n  \"verb\": \"log-in\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/2/risk/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"2",
												"risk",
												"events"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a Risk Score",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ip\": \"125.238.248.246\",\n  \"user\": {\n    \"id\": \"US_112233\",\n    \"name\": \"Eve Smith\"\n  },\n  \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/risk/verify",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"risk",
										"verify"
									]
								},
								"description": "Get a Risk Score"
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"ip\": \"125.238.248.246\",\n  \"user\": {\n    \"id\": \"US_112233\",\n    \"name\": \"Eve Smith\"\n  },\n  \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/2/risk/verify",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"2",
												"risk",
												"verify"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create Rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// For Convenience",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"rule_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"Block access for users in these countries\",\n  \"filters\": [\n    \"NZ\",\n    \"AU\"\n  ],\n  \"name\": \"Geoblock Example\",\n  \"source\": null,\n  \"target\": \"location.address.country_iso_code\",\n  \"type\": \"blacklist\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/risk/rules",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"risk",
										"rules"
									]
								},
								"description": "Create Rule"
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"description\": \"Block access for users in these countries\",\n  \"filters\": [\n    \"NZ\",\n    \"AU\"\n  ],\n  \"name\": \"Geoblock\",\n  \"source\": null,\n  \"target\": \"location.address.country_iso_code\",\n  \"type\": \"blacklist\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/2/risk/rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"2",
												"risk",
												"rules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List Rules",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/risk/rules",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"risk",
										"rules"
									]
								},
								"description": "List Rules"
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/2/risk/rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"2",
												"risk",
												"rules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a Rule",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/risk/rules/{{rule_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"risk",
										"rules",
										"{{rule_id}}"
									]
								},
								"description": "List Rules"
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/2/risk/rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"2",
												"risk",
												"rules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update Rule",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"filters\": [\n    \"0.0.0.0/0\",\n    \"::/0\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{api-domain}}/api/2/risk/rules/{{rule_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"risk",
										"rules",
										"{{rule_id}}"
									]
								},
								"description": "Update Rule"
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"filters\": [\n    \"0.0.0.0/0\",\n    \"::/0\"\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/2/risk/rules/:rule_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"2",
												"risk",
												"rules",
												":rule_id"
											],
											"variable": [
												{
													"key": "rule_id",
													"value": "dol",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete Rule",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/risk/rules/{{rule_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"risk",
										"rules",
										"{{rule_id}}"
									]
								},
								"description": "Delete Rule"
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/2/risk/rules/:rule_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"2",
												"risk",
												"rules",
												":rule_id"
											],
											"variable": [
												{
													"key": "rule_id",
													"value": "dol",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Score Summary",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/2/risk/scores?before=dol&after=dol",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"2",
										"risk",
										"scores"
									],
									"query": [
										{
											"key": "before",
											"value": "dol"
										},
										{
											"key": "after",
											"value": "dol"
										}
									]
								},
								"description": "Get Score Summary"
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/2/risk/scores?before=dol&after=dol",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"2",
												"risk",
												"scores"
											],
											"query": [
												{
													"key": "before",
													"value": "dol"
												},
												{
													"key": "after",
													"value": "dol"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "V1",
					"item": [
						{
							"name": "Get Events",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/1/events",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"events"
									],
									"query": [
										{
											"key": "event_type_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "directory_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "created_at",
											"value": "",
											"disabled": true
										},
										{
											"key": "id",
											"value": "",
											"disabled": true
										},
										{
											"key": "resolution",
											"value": "",
											"disabled": true
										},
										{
											"key": "since",
											"value": "",
											"disabled": true
										},
										{
											"key": "until",
											"value": "",
											"disabled": true
										},
										{
											"key": "user_id",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Event by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/1/events/{{event_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"events",
										"{{event_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Event Types",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/1/events/types",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"events",
										"types"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Groups",
			"item": [
				{
					"name": "V1",
					"item": [
						{
							"name": "Get Groups",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/1/groups",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Group by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/api/1/groups/{{group_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"groups",
										"{{group_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Privileges",
			"item": [
				{
					"name": "V1",
					"item": [
						{
							"name": "List Privileges",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{api-domain}}/api/1/privileges",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"privileges"
									]
								},
								"description": "List"
							},
							"response": []
						},
						{
							"name": "Create a Privilege",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Super Administrator\",\n\t\"privilege\":  {\n\t\t\"Version\": \"2018-05-18\",\n\t\t\"Statement\": [{\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Action\": [\n\t\t\t\t\"*\"\n\t\t\t],\n\t\t\t\"Scope\": [\"*\"]\n\t\t}]\n\t}\n}\n"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/privileges",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"privileges"
									]
								},
								"description": "Create privilege"
							},
							"response": []
						},
						{
							"name": "Update a Privilege",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"User Administrator\",\n\t\"privilege\":  {\n\t\t\"Version\": \"2018-05-18\",\n\t\t\"Statement\": [{\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Action\": [\n\t\t\t\t\"users:Get\",\n\t\t\t\t\"users:Unlock\",\n\t\t\t\t\"users:ResetPassword\",\n\t\t\t\t\"users:ForceLogout\"\n\t\t\t],\n\t\t\t\"Scope\": [\"roles/12\"]\n\t\t}]\n\t}\n}\n\n"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/privileges/{{privilege_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"privileges",
										"{{privilege_id}}"
									]
								},
								"description": "Update"
							},
							"response": []
						},
						{
							"name": "Get a Privilege",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{api-domain}}/api/1/privileges/{{privilege_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"privileges",
										"{{privilege_id}}"
									]
								},
								"description": "List"
							},
							"response": []
						},
						{
							"name": "Delete a Privilege",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/privileges/{{privilege_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"privileges",
										"{{privilege_id}}"
									]
								},
								"description": "Delete"
							},
							"response": []
						},
						{
							"name": "Get Roles assigned to Privilege",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{api-domain}}/api/1/privileges/{{privilege_id}}/roles",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"privileges",
										"{{privilege_id}}",
										"roles"
									]
								},
								"description": "List roles for privilege"
							},
							"response": []
						},
						{
							"name": "Assign a Privilege to Roles",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"roles\": [{{role_id}}]\n}\n"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/privileges/{{privilege_id}}/roles",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"privileges",
										"{{privilege_id}}",
										"roles"
									]
								},
								"description": "Add roles to privilege "
							},
							"response": []
						},
						{
							"name": "Remove a Privilege from a Role",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/privileges/{{privilege_id}}/roles/{{role_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"privileges",
										"{{privilege_id}}",
										"roles",
										"{{role_id}}"
									]
								},
								"description": "Add roles to privilege"
							},
							"response": []
						},
						{
							"name": "Get Users assigned to a Privilege",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{api-domain}}/api/1/privileges/{{privilege_id}}/users",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"privileges",
										"{{privilege_id}}",
										"users"
									]
								},
								"description": "Add privilege to user"
							},
							"response": []
						},
						{
							"name": "Assign a Privilege to Users",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"users\": [{{user_id}}]\n}\n"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/privileges/{{privilege_id}}/users",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"privileges",
										"{{privilege_id}}",
										"users"
									]
								},
								"description": "Add users to privilege"
							},
							"response": []
						},
						{
							"name": "Remove a Privilege from a User",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/privileges/{{privilege_id}}/users/{{user_id}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"privileges",
										"{{privilege_id}}",
										"users",
										"{{user_id}}"
									]
								},
								"description": "Add privilege to group of users"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Invite Links",
			"item": [
				{
					"name": "V1",
					"item": [
						{
							"name": "Generate invite link",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\":\"<email>\"\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/invites/get_invite_link",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"invites",
										"get_invite_link"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send  Invite Link",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\":\"<user_email>\",\n  \"personal_email\":\"<user_personal_email>\"\n}"
								},
								"url": {
									"raw": "https://{{api-domain}}/api/1/invites/send_invite_link",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"api",
										"1",
										"invites",
										"send_invite_link"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Embed Apps",
			"item": [
				{
					"name": "V1",
					"item": [
						{
							"name": "Get Apps to Embed",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{api-domain}}/client/apps/embed2?token={{token}}&email={{email}}",
									"protocol": "https",
									"host": [
										"{{api-domain}}"
									],
									"path": [
										"client",
										"apps",
										"embed2"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "email",
											"value": "{{email}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}