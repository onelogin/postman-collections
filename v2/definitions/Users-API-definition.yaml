---
openapi: 3.0.3
info:
  title: Users v2 - OneLogin API
  description: This API lets you create and manage users stored in the OneLogin user directory.
  version: 2.0.0
  contact: {}
servers:
  - url: "https://{{api-domain}}/api/2"
paths:
  /users:
    get:
      summary: List Users
      description: Get a list of users
      operationId: listUsers
      parameters:
        - name: firstname
          in: query
          schema:
            type: string
            example: ""
        - name: lastname
          in: query
          schema:
            type: string
            example: ""
        - name: email
          in: query
          schema:
            type: string
            example: ""
        - name: created_since
          in: query
          schema:
            type: string
            example: 2018-01-01
        - name: created_until
          in: query
          schema:
            type: string
            example: 2019-09-14
        - name: updated_since
          in: query
          schema:
            type: string
            example: "2020-07-01T20:38:24Z"
        - name: updated_until
          in: query
          schema:
            type: string
            example: "2020-08-14T20:38:24Z"
        - name: last_login_since
          in: query
          schema:
            type: string
            example: 2020-05-01
        - name: last_login_until
          in: query
          schema:
            type: string
            example: "2020-06-01T00:00:00Z"
        - name: group_id
          in: query
          schema:
            type: string
            example: "461331"
        - name: state
          in: query
          schema:
            type: string
            example: "3"
        - name: status
          in: query
          schema:
            type: string
            example: "3"
        - name: fields
          in: query
          schema:
            type: string
            example: "id,firstname,lastname,profile_picture_url,last_login"
        - name: username
          in: query
          schema:
            type: string
        - name: samaccountname
          in: query
          schema:
            type: string
        - name: directory_id
          in: query
          schema:
            type: string
            example: "123"
        - name: external_id
          in: query
          schema:
            type: string
        - name: app_id
          in: query
          schema:
            type: string
            example: "123"
        - name: user_ids
          in: query
          schema:
            type: string
            example: "123,456"
        - name: "custom_attributes.{{custom_attribute_short_name}}"
          in: query
          schema:
            type: string
            example: something
        - name: sort
          in: query
          schema:
            type: string
            example: +firstname
      responses:
        "200":
          description: ""
    post:
      summary: Create User
      description: Create User
      operationId: createUser
      parameters:
        - name: mappings
          in: query
          schema:
            type: string
            example: sync
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  example: Steve
                lastname:
                  type: string
                  example: Smith
                password:
                  type: string
                  example: partytime123
                password_confirmation:
                  type: string
                  example: partytime123
                username:
                  type: string
                  example: steve.smith
            example:
              firstname: Steve
              lastname: Smith
              password: partytime123
              password_confirmation: partytime123
              username: steve.smith
      responses:
        "200":
          description: ""
  "/users/{user_id}":
    get:
      summary: Get User
      description: Get User
      operationId: getUser
      responses:
        "200":
          description: ""
    put:
      summary: Update User
      description: Update User
      operationId: updateUser
      parameters:
        - name: mappings
          in: query
          schema:
            type: string
            example: sync
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: number
                  example: 1
            example:
              state: 1
      responses:
        "200":
          description: ""
    delete:
      summary: Delete User
      description: Delete User
      operationId: deleteUser
      responses:
        "200":
          description: ""
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
  /users/authenticate:
      post:
        summary: Authenticate User
        description: Authenticate a user using EMail, Username or SAMAccountName.
        operationId: authUser

        requestBody:
          content:
            application/json:
              schema:
                type: object
                required:
                    - password
                properties:
                    email:
                        type: string
                        example: example@user.com
                    username:
                        type: string
                        example: my.username
                    samaccountname:
                        type: string
                        example: group/my.pc-username
                    password:
                        type: string
        responses:
            "200":
                description: "Authentication successful"
            "401":
                description: "Invalid credentials"

tags: []